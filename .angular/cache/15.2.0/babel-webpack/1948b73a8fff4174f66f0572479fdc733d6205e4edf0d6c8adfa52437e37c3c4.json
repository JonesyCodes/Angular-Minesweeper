{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-squares/grid-squares.component\";\nfunction GameGridComponent_app_grid_squares_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-grid-squares\", 4);\n    i0.ɵɵlistener(\"squareClickedEvent\", function GameGridComponent_app_grid_squares_3_Template_app_grid_squares_squareClickedEvent_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const idx_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.squareClicked(idx_r2));\n    })(\"squareRightClickedEvent\", function GameGridComponent_app_grid_squares_3_Template_app_grid_squares_squareRightClickedEvent_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const idx_r2 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.squareRightClicked(idx_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", s_r1);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"grid-template-columns\": a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nexport class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.mines = 1;\n    this.columns = 5;\n    this.rows = 5;\n    this.flagOnClick = false;\n    this.gameOverEvent = new EventEmitter();\n    this.flagEvent = new EventEmitter();\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    this.revealedEmpty = 0;\n    this.gameOver = false;\n  }\n  ngOnInit() {\n    this.setDimension();\n    this.setColumns = `repeat(${this.columns}, 50px)`;\n  }\n  ngOnChanges(changes) {\n    console.log(changes.flagOnClick);\n  }\n  //// Generate grid and randomise bomb locations\n  setDimension() {\n    this.squares = [];\n    let totalSquares = this.rows * this.columns;\n    for (let i = 0; i < totalSquares; i++) {\n      if (i < this.mines) {\n        const squareData = {\n          mine: true,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      } else {\n        const squareData = {\n          mine: false,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      }\n    }\n    this.squares.sort(() => Math.random() - 0.5);\n    let index = 0;\n    this.squares.forEach(() => {\n      let adjacentSquares = [];\n      if (index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - 1);\n      }\n      ; // left\n      if (index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + 1);\n      }\n      ; // right\n      if (index - this.columns >= 0) {\n        adjacentSquares.push(index - this.columns);\n      }\n      ; // top\n      if (index + this.columns < totalSquares) {\n        adjacentSquares.push(index + this.columns);\n      }\n      ; // bottom\n      if (index - this.columns - 1 >= 0 && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - this.columns - 1);\n      }\n      ; // top left\n      if (index - this.columns + 1 >= 0 && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index - this.columns + 1);\n      }\n      ; // top right\n      if (index + this.columns - 1 < totalSquares && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index + this.columns - 1);\n      }\n      ; // bottom left\n      if (index + this.columns + 1 < totalSquares && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + this.columns + 1);\n      }\n      ; // bottom right\n      this.squares[index].adjacent = adjacentSquares;\n      index++;\n    });\n  }\n  //// Recieves Event emitted from square, check adjacent squares for mines, if none found repeat for adjacent squares\n  squareClicked(index) {\n    if (this.flagOnClick) {\n      this.squareRightClicked(index);\n      return;\n    }\n    let square = this.squares[index];\n    let adjacentMines = 0;\n    square.adjacent?.forEach(index => {\n      if (this.checkForMine(index)) {\n        adjacentMines++;\n      }\n    });\n    square = {\n      state: 'revealed',\n      mine: square.mine,\n      adjacentMines: adjacentMines,\n      adjacent: square.adjacent\n    };\n    this.squares[index] = square;\n    if (adjacentMines == 0) {\n      square.adjacent?.forEach(check => {\n        if (this.squares[check].state == 'hidden') {\n          this.squareClicked(check);\n        }\n      });\n    }\n    this.checkForWin(square);\n  }\n  //// Recieves Event emitted from square, adds/removes flag \n  squareRightClicked(index) {\n    let square = this.squares[index];\n    if (square.state == 'hidden') {\n      square = {\n        state: 'flagged',\n        mine: square.mine,\n        adjacentMines: square.adjacentMines,\n        adjacent: square.adjacent\n      };\n      this.squares[index] = square;\n      this.flagEvent.emit(true);\n    } else {\n      square = {\n        state: 'hidden',\n        mine: square.mine,\n        adjacentMines: square.adjacentMines,\n        adjacent: square.adjacent\n      };\n      this.squares[index] = square;\n      this.flagEvent.emit(false);\n    }\n  }\n  //// Checks if a square is a mine\n  checkForMine(index) {\n    let square = this.squares[index];\n    if (square.mine) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  //// Checks if the win/loss condition has been met\n  checkForWin(currentSquare) {\n    if (currentSquare.mine) {\n      this.gameOverEvent.emit(false);\n      this.gameOver = true;\n    } else {\n      this.revealedEmpty++;\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {\n        this.gameOverEvent.emit(true);\n      }\n    }\n  }\n}\nGameGridComponent.ɵfac = function GameGridComponent_Factory(t) {\n  return new (t || GameGridComponent)();\n};\nGameGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameGridComponent,\n  selectors: [[\"app-game-grid\"]],\n  inputs: {\n    mines: \"mines\",\n    columns: \"columns\",\n    rows: \"rows\",\n    flagOnClick: \"flagOnClick\"\n  },\n  outputs: {\n    gameOverEvent: \"gameOverEvent\",\n    flagEvent: \"flagEvent\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 7,\n  consts: [[1, \"gridComponent\"], [\"id\", \"gridDiv\"], [\"id\", \"minefield\", 1, \"grid\", 3, \"ngStyle\", \"ngClass\"], [3, \"data\", \"squareClickedEvent\", \"squareRightClickedEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\", \"squareClickedEvent\", \"squareRightClickedEvent\"]],\n  template: function GameGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, GameGridComponent_app_grid_squares_3_Template, 1, 1, \"app-grid-squares\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx.setColumns))(\"ngClass\", i0.ɵɵpureFunction1(5, _c1, ctx.gameOver));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgStyle, i2.GridSquaresComponent],\n  styles: [\".grid[_ngcontent-%COMP%] {\\r\\n  display: grid;\\r\\n  background-image: url('dirt2.jfif');\\r\\n  background-size: contain;\\r\\n  border: 4px ridge rgba(114, 132, 150, 1);\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  overflow-x: auto;\\r\\n}\\r\\n\\r\\n.gridComponent[_ngcontent-%COMP%]{\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  margin: 2vh 0 4vh 0;\\r\\n}\\r\\n\\r\\n.disabled[_ngcontent-%COMP%] {\\r\\n  pointer-events: none;\\r\\n  opacity: 0.8;\\r\\n}\\r\\n\\r\\n#gridDiv[_ngcontent-%COMP%] {\\r\\n  max-width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1ncmlkL2dhbWUtZ3JpZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLG1DQUE0QztFQUM1Qyx3QkFBd0I7RUFDeEIsd0NBQXdDO0VBQ3hDLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usb0JBQW9CO0VBQ3BCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGVBQWU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIuZ3JpZCB7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoc3JjXFxhc3NldHNcXGRpcnQyLmpmaWYpO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxuICBib3JkZXI6IDRweCByaWRnZSByZ2JhKDExNCwgMTMyLCAxNTAsIDEpO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBwYWRkaW5nOiA1cHg7XHJcbiAgb3ZlcmZsb3cteDogYXV0bztcclxufVxyXG5cclxuLmdyaWRDb21wb25lbnR7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luOiAydmggMCA0dmggMDtcclxufVxyXG5cclxuLmRpc2FibGVkIHtcclxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICBvcGFjaXR5OiAwLjg7XHJcbn1cclxuXHJcbiNncmlkRGl2IHtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","GameGridComponent","constructor","ngOnInit","setDimension","setColumns","columns","ngOnChanges","changes","console","log","flagOnClick","squares","totalSquares","rows","i","mines","squareData","mine","state","push","sort","Math","random","index","forEach","adjacentSquares","adjacent","squareClicked","squareRightClicked","square","adjacentMines","checkForMine","check","checkForWin","flagEvent","emit","currentSquare","gameOverEvent","gameOver","revealedEmpty","selectors","inputs","outputs","features","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-game-grid',\r\n  templateUrl: './game-grid.component.html',\r\n  styleUrls: ['./game-grid.component.css']\r\n})\r\nexport class GameGridComponent {\r\n  title = 'Minefield'\r\n\r\n  @Input() mines: number = 1;\r\n  @Input() columns: number = 5;\r\n  @Input() rows: number = 5;\r\n  @Input() flagOnClick: boolean = false;\r\n\r\n  @Output() gameOverEvent: EventEmitter<boolean> = new EventEmitter();\r\n  @Output() flagEvent: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  colArray: number[] = [];\r\n  rowArray: number[] = [];\r\n  squares: SquareData[] = [];\r\n  revealedEmpty = 0;\r\n  setColumns: string | undefined;\r\n  gameOver: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.setDimension();\r\n    this.setColumns = `repeat(${this.columns}, 50px)`\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    console.log(changes.flagOnClick);\r\n  }\r\n\r\n  //// Generate grid and randomise bomb locations\r\n  setDimension() {\r\n    this.squares = [];\r\n    let totalSquares = this.rows * this.columns;\r\n\r\n    for (let i = 0; i < totalSquares; i++) {\r\n\r\n      if (i < this.mines) {\r\n        const squareData: SquareData = {\r\n          mine: true,\r\n          state: 'hidden'\r\n        };\r\n\r\n        this.squares.push(squareData);\r\n      }\r\n      else {\r\n        const squareData: SquareData = {\r\n          mine: false,\r\n          state: 'hidden'\r\n        };\r\n        this.squares.push(squareData);\r\n      }\r\n    }\r\n\r\n    this.squares.sort(() => Math.random() - 0.5);\r\n\r\n    let index = 0;\r\n\r\n    this.squares.forEach(() => {\r\n      let adjacentSquares: number[] = [];\r\n      if ((index % this.columns) - 1 >= 0) { adjacentSquares.push(index - 1) }; // left\r\n      if ((index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + 1) }; // right\r\n      if (index - this.columns >= 0) { adjacentSquares.push(index - this.columns) }; // top\r\n      if (index + this.columns < totalSquares) { adjacentSquares.push(index + this.columns) }; // bottom\r\n      if ((index - this.columns) - 1 >= 0 && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index - this.columns - 1) }; // top left\r\n      if ((index - this.columns) + 1 >= 0 && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index - this.columns + 1) }; // top right\r\n      if ((index + this.columns) - 1 < totalSquares && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index + this.columns - 1) }; // bottom left\r\n      if ((index + this.columns) + 1 < totalSquares && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + this.columns + 1) }; // bottom right\r\n      this.squares[index].adjacent = adjacentSquares;\r\n      index++;\r\n    })\r\n  }\r\n\r\n  //// Recieves Event emitted from square, check adjacent squares for mines, if none found repeat for adjacent squares\r\n  squareClicked(index: number) {\r\n    if (this.flagOnClick) {\r\n      this.squareRightClicked(index);\r\n      return;\r\n    }\r\n\r\n    let square = this.squares[index];\r\n    let adjacentMines = 0;\r\n\r\n    square.adjacent?.forEach((index: number) => {\r\n      if (this.checkForMine(index)) {        \r\n        adjacentMines++;\r\n      }\r\n    })\r\n\r\n    square = { state: 'revealed', mine: square.mine, adjacentMines: adjacentMines, adjacent: square.adjacent };\r\n    this.squares[index] = square;\r\n\r\n    if (adjacentMines == 0) {\r\n      square.adjacent ?.forEach((check: number) => {\r\n        if (this.squares[check].state == 'hidden') {\r\n          this.squareClicked(check);\r\n        }\r\n      })\r\n    }\r\n\r\n    this.checkForWin(square);\r\n  }\r\n\r\n  //// Recieves Event emitted from square, adds/removes flag \r\n  squareRightClicked(index: number) {\r\n    let square = this.squares[index];\r\n\r\n    if (square.state == 'hidden') {\r\n      square = { state: 'flagged', mine: square.mine, adjacentMines: square.adjacentMines, adjacent: square.adjacent };\r\n      this.squares[index] = square;\r\n      this.flagEvent.emit(true);\r\n    }\r\n    else {\r\n      square = { state: 'hidden', mine: square.mine, adjacentMines: square.adjacentMines, adjacent: square.adjacent };\r\n      this.squares[index] = square;\r\n      this.flagEvent.emit(false);\r\n    }\r\n  }\r\n\r\n  //// Checks if a square is a mine\r\n  checkForMine(index: number) {\r\n    let square = this.squares[index];\r\n\r\n    if (square.mine) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //// Checks if the win/loss condition has been met\r\n  checkForWin(currentSquare: SquareData) {\r\n    if (currentSquare.mine) {\r\n      this.gameOverEvent.emit(false);\r\n      this.gameOver = true;\r\n    }\r\n    else {\r\n      this.revealedEmpty++;\r\n\r\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {      \r\n        this.gameOverEvent.emit(true);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"gridComponent\">\r\n  <div id=\"gridDiv\">\r\n    <div id=\"minefield\" class=\"grid\" [ngStyle]=\"{'grid-template-columns': setColumns}\" [ngClass]=\"{'disabled': gameOver}\">\r\n      <app-grid-squares *ngFor=\"let s of squares; let idx=index\" [data]=\"s\" (squareClickedEvent)=\"squareClicked(idx)\" (squareRightClickedEvent)=\"squareRightClicked(idx)\"></app-grid-squares>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}