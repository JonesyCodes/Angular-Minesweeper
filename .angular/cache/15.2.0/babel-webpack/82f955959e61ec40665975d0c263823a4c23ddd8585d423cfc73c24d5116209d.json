{"ast":null,"code":"import { ViewContainerRef, EventEmitter } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"placeholder\"];\nfunction GameStatusComponent_ng_template_23_Template(rf, ctx) {}\nexport class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.flagCount = 0;\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.gameMessage = new EventEmitter();\n  }\n  ngOnInit() {\n    this.newGame();\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.mines = this.mineCount;\n    component.instance.columns = this.columnCount;\n    component.instance.rows = this.rowCount;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    component.instance.flagEvent.subscribe(value => this.changeFlagCount(value));\n    this.flagCount = 0;\n    this.gameMessage.emit('New mines buried');\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    if (win) {\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\n    } else {\n      this.gameMessage.emit('Go watch The Hurt Locker');\n    }\n  }\n  changeFlagCount(flagAdded) {\n    if (flagAdded) {\n      this.flagCount++;\n    } else {\n      this.flagCount--;\n    }\n  }\n}\nGameStatusComponent.ɵfac = function GameStatusComponent_Factory(t) {\n  return new (t || GameStatusComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector));\n};\nGameStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameStatusComponent,\n  selectors: [[\"app-game-status\"]],\n  viewQuery: function GameStatusComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  inputs: {\n    mineCount: \"mineCount\",\n    rowCount: \"rowCount\",\n    columnCount: \"columnCount\"\n  },\n  outputs: {\n    gameMessage: \"gameMessage\"\n  },\n  decls: 25,\n  vars: 2,\n  consts: [[\"id\", \"controlsDiv\", 1, \"container\"], [1, \"row\"], [1, \"col-12\", \"col-sm-8\", \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"toggleSwitch\", 1, \"form-check-input\"], [\"for\", \"flexSwitchCheckDefault\", 1, \"form-check-label\", \"text-left\"], [\"id\", \"resetDiv\", 1, \"col-12\", \"col-sm-4\"], [\"id\", \"resetGame\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-recycle\"], [1, \"col\"], [1, \"bi\", \"bi-flag-fill\"], [\"id\", \"gameGrid\"], [\"placeholder\", \"\"]],\n  template: function GameStatusComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"input\", 3);\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Flag on default click\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function GameStatusComponent_Template_button_click_7_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(8, \"Reset\\u00A0\");\n      i0.ɵɵelement(9, \"i\", 7);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 1)(11, \"div\", 8)(12, \"label\");\n      i0.ɵɵtext(13);\n      i0.ɵɵelement(14, \"i\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \"\\u00A0 \");\n      i0.ɵɵelementStart(16, \"label\");\n      i0.ɵɵtext(17);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\", 8)(19, \"label\");\n      i0.ɵɵtext(20, \"Time Spent: \");\n      i0.ɵɵelement(21, \"cd-timer\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(22, \"div\");\n      i0.ɵɵtemplate(23, GameStatusComponent_ng_template_23_Template, 0, 0, \"ng-template\", 10, 11, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵtextInterpolate1(\"\", ctx.flagCount, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"Mines: \", ctx.mineCount, \"\");\n    }\n  },\n  styles: [\"#resetGame[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-self: flex-end;\\r\\n}\\r\\n\\r\\n#controlsDiv[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n#resetDiv[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: end;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n#gridDiv[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  overflow-x: auto;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zdGF0dXMvZ2FtZS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixvQkFBb0I7RUFDcEIsVUFBVTtBQUNaOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtBQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIiNyZXNldEdhbWUge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XHJcbn1cclxuXHJcbiNjb250cm9sc0RpdiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuXHJcbiNyZXNldERpdiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcclxuICBwYWRkaW5nOiAwO1xyXG59XHJcblxyXG4jZ3JpZERpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgb3ZlcmZsb3cteDogYXV0bztcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,gBAAgB,EAA2GC,YAAY,QAAQ,eAAe;AAClL,SAASC,iBAAiB,QAAQ,kCAAkC;;;;AAQpE,OAAM,MAAOC,mBAAmB;EAY9BC,YAAoBC,QAAkC,EAAUC,QAAkB;IAA9D,aAAQ,GAARD,QAAQ;IAAoC,aAAQ,GAARC,QAAQ;IAXxE,UAAK,GAAG,YAAY;IACpB,cAAS,GAAG,CAAC;IAEJ,cAAS,GAAW,CAAC;IACrB,aAAQ,GAAW,CAAC;IACpB,gBAAW,GAAW,CAAC;IAEtB,gBAAW,GAAyB,IAAIL,YAAY,EAAE;EAIqB;EAErFM,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEA;EACAA,OAAO;IACL,IAAI,CAACC,WAAW,CAACC,MAAM,EAAE;IACzB,MAAMC,gBAAgB,GAAG,IAAI,CAACN,QAAQ,CAACO,uBAAuB,CAACV,iBAAiB,CAAC;IACjF,MAAMW,SAAS,GAAGF,gBAAgB,CAACG,MAAM,CAAC,IAAI,CAACR,QAAQ,CAAC;IACxD,IAAI,CAACG,WAAW,CAACM,MAAM,CAACF,SAAS,CAACG,QAAQ,CAAC;IAE3CH,SAAS,CAACI,QAAQ,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS;IAEzCN,SAAS,CAACI,QAAQ,CAACG,OAAO,GAAG,IAAI,CAACC,WAAW;IAC7CR,SAAS,CAACI,QAAQ,CAACK,IAAI,GAAG,IAAI,CAACC,QAAQ;IAEvCV,SAAS,CAACI,QAAQ,CAACO,aAAa,CAACC,SAAS,CAAEC,KAAK,IAAK,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,CAAC;IAC3Eb,SAAS,CAACI,QAAQ,CAACW,SAAS,CAACH,SAAS,CAAEC,KAAK,IAAK,IAAI,CAACG,eAAe,CAACH,KAAK,CAAC,CAAC;IAE9E,IAAI,CAACI,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,kBAAkB,CAAC;EAC3C;EAEA;EACAL,QAAQ,CAACM,GAAY;IACnB,IAAIA,GAAG,EAAE;MACP,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC,0CAA0C,CAAC;KAClE,MACI;MACH,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,0BAA0B,CAAC;;EAErD;EAEAH,eAAe,CAACK,SAAkB;IAChC,IAAIA,SAAS,EAAE;MACb,IAAI,CAACJ,SAAS,EAAE;KACjB,MACI;MACH,IAAI,CAACA,SAAS,EAAE;;EAEpB;;AAtDW3B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAgC;EAAAC;IAAA;6BAUIpC,gBAAgB;;;;;;;;;;;;;;;;;;;;MClBpDqC,8BAAwC;MAIlCA,2BAAkF;MAClFA,gCAAuE;MAAAA,qCAAqB;MAAAA,iBAAQ;MAEtGA,8BAA2C;MACQA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,2BAAW;MAAAA,uBAA6B;MAAAA,iBAAS;MAI1HA,+BAAiB;MAENA,aAAc;MAAAA,wBAA+B;MAAAA,iBAAQ;MAAAA,wBAC5D;MAAAA,8BAAO;MAAAA,aAAoB;MAAAA,iBAAQ;MAErCA,+BAAiB;MACRA,6BAAY;MAAAA,4BAAqB;MAACA,iBAAQ;MAKvDA,4BAAK;MACHA,sHAAsD;MACxDA,iBAAM;;;MAXOA,gBAAc;MAAdA,6CAAc;MACdA,eAAoB;MAApBA,mDAAoB","names":["ViewContainerRef","EventEmitter","GameGridComponent","GameStatusComponent","constructor","resolver","injector","ngOnInit","newGame","placeholder","detach","componentFactory","resolveComponentFactory","component","create","insert","hostView","instance","mines","mineCount","columns","columnCount","rows","rowCount","gameOverEvent","subscribe","value","gameOver","flagEvent","changeFlagCount","flagCount","gameMessage","emit","win","flagAdded","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.html"],"sourcesContent":["import { Component, ViewContainerRef, ComponentRef, ViewChild, QueryList, ComponentFactoryResolver, Injector, ComponentFactory, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GameGridComponent } from '../game-grid/game-grid.component';\r\nimport { CdTimerModule } from 'angular-cd-timer';\r\n\r\n@Component({\r\n  selector: 'app-game-status',\r\n  templateUrl: './game-status.component.html',\r\n  styleUrls: ['./game-status.component.css']\r\n})\r\nexport class GameStatusComponent {\r\n  title = 'Status Bar'\r\n  flagCount = 0;\r\n\r\n  @Input() mineCount: number = 3;\r\n  @Input() rowCount: number = 5;\r\n  @Input() columnCount: number = 5;\r\n\r\n  @Output() gameMessage: EventEmitter<string> = new EventEmitter();\r\n\r\n  @ViewChild('placeholder', { read: ViewContainerRef, static: true })\r\n  public placeholder!: ViewContainerRef;\r\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {}\r\n\r\n  ngOnInit() {\r\n    this.newGame();\r\n  }\r\n\r\n  //// Generate new minefield and clear game message\r\n  newGame() {\r\n    this.placeholder.detach();\r\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\r\n    const component = componentFactory.create(this.injector);\r\n    this.placeholder.insert(component.hostView);\r\n\r\n    component.instance.mines = this.mineCount;\r\n\r\n    component.instance.columns = this.columnCount;\r\n    component.instance.rows = this.rowCount;\r\n\r\n    component.instance.gameOverEvent.subscribe((value) => this.gameOver(value));\r\n    component.instance.flagEvent.subscribe((value) => this.changeFlagCount(value));\r\n\r\n    this.flagCount = 0;\r\n    this.gameMessage.emit('New mines buried');\r\n  }\r\n\r\n  //// Create game message based on game result\r\n  gameOver(win: boolean) {\r\n    if (win) {      \r\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\r\n    }\r\n    else {\r\n      this.gameMessage.emit('Go watch The Hurt Locker');\r\n    }\r\n  }\r\n\r\n  changeFlagCount(flagAdded: boolean) {\r\n    if (flagAdded) {\r\n      this.flagCount++;\r\n    }\r\n    else {\r\n      this.flagCount--;\r\n    }\r\n  }\r\n\r\n  //toggleIsActive(event: Event) {\r\n  //  console.log(event.target[':checked']);\r\n  //}\r\n}\r\n","\r\n<div id=\"controlsDiv\" class=\"container\">\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-12 col-sm-8 form-check form-switch\">\r\n      <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"toggleSwitch\" />\r\n      <label class=\"form-check-label text-left\" for=\"flexSwitchCheckDefault\">Flag on default click</label>\r\n    </div>\r\n    <div id=\"resetDiv\" class=\"col-12 col-sm-4\">\r\n      <button id=\"resetGame\" class=\"btn btn-secondary\" (click)=\"newGame()\">Reset&nbsp;<i class=\"bi bi-recycle\"></i></button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <label>{{flagCount}} <i class=\"bi bi-flag-fill\"></i></label>&nbsp;\r\n      <label>Mines: {{mineCount}}</label>\r\n    </div>\r\n    <div class=\"col\">\r\n      <label>Time Spent: <cd-timer></cd-timer> </label>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div>\r\n  <ng-template #placeholder id=\"gameGrid\"></ng-template>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}