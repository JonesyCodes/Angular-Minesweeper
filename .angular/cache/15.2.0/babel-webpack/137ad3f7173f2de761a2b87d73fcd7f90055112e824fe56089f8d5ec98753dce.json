{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"hidden\": a0,\n    \"revealed\": a1,\n    \"flagged\": a2,\n    \"detonated\": a3\n  };\n};\nexport class GridSquaresComponent {\n  constructor() {\n    this.squareClickedEvent = new EventEmitter();\n    this.squareRightClickedEvent = new EventEmitter();\n    this.value = \"Mine?\";\n  }\n  ngOnInit() {\n    this.displayValue();\n  }\n  //// Calls for update of value on property changes\n  ngOnChanges(changes) {\n    this.displayValue();\n  }\n  //// Sets value of square based on state property\n  displayValue() {\n    if (this.data.state == 'hidden') {\n      this.value = '';\n    } else if (this.data.state == 'flagged') {\n      this.value = 'bi-flag-fill';\n    } else if (this.data.mine) {\n      this.value = '';\n    } else {\n      this.value = this.data.adjacentMines == 0 ? `` : `bi-${this.data.adjacentMines}-circle-fill`;\n    }\n  }\n  //// Emits left click event\n  squareClicked() {\n    this.squareClickedEvent.emit();\n  }\n  //// Emits right click event\n  squareRightClicked(event) {\n    event.preventDefault();\n    if (this.data.state == 'hidden' || this.data.state == 'flagged') {\n      this.squareRightClickedEvent.emit();\n    }\n  }\n}\nGridSquaresComponent.ɵfac = function GridSquaresComponent_Factory(t) {\n  return new (t || GridSquaresComponent)();\n};\nGridSquaresComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GridSquaresComponent,\n  selectors: [[\"app-grid-squares\"]],\n  inputs: {\n    data: \"data\"\n  },\n  outputs: {\n    squareClickedEvent: \"squareClickedEvent\",\n    squareRightClickedEvent: \"squareRightClickedEvent\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 9,\n  consts: [[1, \"gridSquare\", 3, \"ngClass\", \"click\", \"contextmenu\"]],\n  template: function GridSquaresComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GridSquaresComponent_Template_button_click_0_listener() {\n        return ctx.squareClicked();\n      })(\"contextmenu\", function GridSquaresComponent_Template_button_contextmenu_0_listener($event) {\n        return ctx.squareRightClicked($event);\n      });\n      i0.ɵɵelement(1, \"i\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(4, _c0, ctx.data.state === \"hidden\", ctx.data.state === \"revealed\", ctx.data.state === \"flagged\", ctx.data.mine === true && ctx.data.state === \"revealed\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"bi \", ctx.value, \"\");\n    }\n  },\n  dependencies: [i1.NgClass],\n  styles: [\".gridSquare[_ngcontent-%COMP%] {\\r\\n  min-width: 50px;\\r\\n  min-height: 50px;\\r\\n  \\r\\n  border: 2px solid rgba(2, 79, 110, 1);\\r\\n  margin: 0;\\r\\n  padding: 3px;\\r\\n  \\r\\n  font-weight: 600;\\r\\n  \\r\\n  color: rgba(5, 230, 255, 1);\\r\\n  text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\\r\\n}\\r\\n\\r\\n.gridSquare[_ngcontent-%COMP%]:hover {\\r\\n  border: 2px dashed rgba(255, 102, 0, 1);\\r\\n}\\r\\n\\r\\n.hidden[_ngcontent-%COMP%] {\\r\\n  background-image: url('grass2.jpg');\\r\\n  background-size: contain;\\r\\n}\\r\\n\\r\\n.revealed[_ngcontent-%COMP%] {\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.detonated[_ngcontent-%COMP%] {\\r\\n  background-image: url('landmine2.jfif');\\r\\n  background-size: contain;\\r\\n}\\r\\n\\r\\n.flagged[_ngcontent-%COMP%] {\\r\\n  background-image: url('grass2.jpg');\\r\\n  background-size: contain;\\r\\n  cursor:default;\\r\\n  color: rgba(255, 69, 255, 1);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ3JpZC1zcXVhcmVzL2dyaWQtc3F1YXJlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixxREFBcUQ7RUFDckQscUNBQXFDO0VBQ3JDLFNBQVM7RUFDVCxZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGdCQUFnQjtFQUNoQiwwQ0FBMEM7RUFDMUMsMkJBQTJCO0VBQzNCLGlFQUFpRTtBQUNuRTs7QUFFQTtFQUNFLHVDQUF1QztBQUN6Qzs7QUFFQTtFQUNFLG1DQUE0QztFQUM1Qyx3QkFBd0I7QUFDMUI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1Q0FBZ0Q7RUFDaEQsd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsbUNBQTRDO0VBQzVDLHdCQUF3QjtFQUN4QixjQUFjO0VBQ2QsNEJBQTRCO0FBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiLmdyaWRTcXVhcmUge1xyXG4gIG1pbi13aWR0aDogNTBweDtcclxuICBtaW4taGVpZ2h0OiA1MHB4O1xyXG4gIC8qYm9yZGVyOiAycHggc29saWQgcmdiYSgyMjcsIDIxNSwgMTk1LCAxKTsgb3JpZ2luYWwqL1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMiwgNzksIDExMCwgMSk7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIHBhZGRpbmc6IDNweDtcclxuICAvKmZvbnQtc2l6ZTogMS41dnc7Ki9cclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIC8qY29sb3I6IHJnYmEoMjQ1LCAyNTAsIDI1NSwgMSk7IG9yaWdpbmFsKi9cclxuICBjb2xvcjogcmdiYSg1LCAyMzAsIDI1NSwgMSk7XHJcbiAgdGV4dC1zaGFkb3c6IC0xcHggMCBibGFjaywgMCAxcHggYmxhY2ssIDFweCAwIGJsYWNrLCAwIC0xcHggYmxhY2s7XHJcbn1cclxuXHJcbi5ncmlkU3F1YXJlOmhvdmVyIHtcclxuICBib3JkZXI6IDJweCBkYXNoZWQgcmdiYSgyNTUsIDEwMiwgMCwgMSk7XHJcbn1cclxuXHJcbi5oaWRkZW4ge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChzcmNcXGFzc2V0c1xcZ3Jhc3MyLmpwZyk7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG59XHJcblxyXG4ucmV2ZWFsZWQge1xyXG4gIGJhY2tncm91bmQ6IG5vbmU7XHJcbn1cclxuXHJcbi5kZXRvbmF0ZWQge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChzcmNcXGFzc2V0c1xcbGFuZG1pbmUyLmpmaWYpO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcclxufVxyXG5cclxuLmZsYWdnZWQge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChzcmNcXGFzc2V0c1xcZ3Jhc3MyLmpwZyk7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb250YWluO1xyXG4gIGN1cnNvcjpkZWZhdWx0O1xyXG4gIGNvbG9yOiByZ2JhKDI1NSwgNjksIDI1NSwgMSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAmCA,YAAY,QAAuB,eAAe;;;;;;;;;;;AAQrF,OAAM,MAAOC,oBAAoB;EALjCC;IASY,uBAAkB,GAAuB,IAAIF,YAAY,EAAE;IAC3D,4BAAuB,GAAuB,IAAIA,YAAY,EAAE;IAE1E,UAAK,GAAW,OAAO;;EAEvBG,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEA;EACAC,WAAW,CAACC,OAAsB;IAChC,IAAI,CAACF,YAAY,EAAE;EACrB;EAEA;EACAA,YAAY;IACV,IAAI,IAAI,CAACG,IAAI,CAACC,KAAK,IAAI,QAAQ,EAC/B;MACE,IAAI,CAACC,KAAK,GAAG,EAAE;KAChB,MACI,IAAI,IAAI,CAACF,IAAI,CAACC,KAAK,IAAI,SAAS,EAAE;MACrC,IAAI,CAACC,KAAK,GAAG,cAAc;KAC5B,MACI,IAAI,IAAI,CAACF,IAAI,CAACG,IAAI,EACvB;MACE,IAAI,CAACD,KAAK,GAAG,EAAE;KAChB,MAED;MACE,IAAI,CAACA,KAAK,GAAG,IAAI,CAACF,IAAI,CAACI,aAAa,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,CAACJ,IAAI,CAACI,aAAa,cAAc;;EAEhG;EAEA;EACAC,aAAa;IACT,IAAI,CAACC,kBAAkB,CAACC,IAAI,EAAE;EAClC;EAEA;EACAC,kBAAkB,CAACC,KAAsC;IACvDA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,IAAI,CAACV,IAAI,CAACC,KAAK,IAAI,QAAQ,IAAI,IAAI,CAACD,IAAI,CAACC,KAAK,IAAI,SAAS,EAAE;MAC/D,IAAI,CAACU,uBAAuB,CAACJ,IAAI,EAAE;;EAEvC;;AAjDWb,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAkB;EAAAC;IAAAb;EAAA;EAAAc;IAAAR;IAAAK;EAAA;EAAAI;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCRjCC,iCAIS;MAFDA;QAAA,OAASC,mBAAe;MAAA,EAAC;QAAA,OACVA,8BAA0B;MAAA,EADhB;MAG/BD,oBAA4B;MAC9BA,iBAAS;;;MALDA,uMAAyL;MAI5LA,eAAoB;MAApBA,+CAAoB","names":["EventEmitter","GridSquaresComponent","constructor","ngOnInit","displayValue","ngOnChanges","changes","data","state","value","mine","adjacentMines","squareClicked","squareClickedEvent","emit","squareRightClicked","event","preventDefault","squareRightClickedEvent","selectors","inputs","outputs","features","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\grid-squares\\grid-squares.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\grid-squares\\grid-squares.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-grid-squares',\r\n  templateUrl: './grid-squares.component.html',\r\n  styleUrls: ['./grid-squares.component.css']\r\n})\r\nexport class GridSquaresComponent {\r\n\r\n  @Input() data!: SquareData;\r\n\r\n  @Output() squareClickedEvent: EventEmitter<void> = new EventEmitter();\r\n  @Output() squareRightClickedEvent: EventEmitter<void> = new EventEmitter();\r\n\r\n  value: string = \"Mine?\";\r\n\r\n  ngOnInit() {\r\n    this.displayValue();\r\n  }\r\n\r\n  //// Calls for update of value on property changes\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.displayValue();\r\n  }\r\n\r\n  //// Sets value of square based on state property\r\n  displayValue() {\r\n    if (this.data.state == 'hidden')\r\n    {\r\n      this.value = '';\r\n    }\r\n    else if (this.data.state == 'flagged') {\r\n      this.value = 'bi-flag-fill';\r\n    }\r\n    else if (this.data.mine)\r\n    {\r\n      this.value = '';\r\n    }\r\n    else\r\n    {\r\n      this.value = this.data.adjacentMines == 0 ? `` : `bi-${this.data.adjacentMines}-circle-fill`;\r\n    }\r\n  }\r\n\r\n  //// Emits left click event\r\n  squareClicked() {\r\n      this.squareClickedEvent.emit();\r\n  }\r\n\r\n  //// Emits right click event\r\n  squareRightClicked(event: { preventDefault: () => void; }) {\r\n    event.preventDefault();\r\n\r\n    if (this.data.state == 'hidden' || this.data.state == 'flagged') {\r\n      this.squareRightClickedEvent.emit();\r\n    }\r\n  }\r\n}\r\n","<button class=\"gridSquare\"\n        [ngClass]=\"{'hidden': data.state === 'hidden', 'revealed': data.state === 'revealed', 'flagged': data.state === 'flagged', 'detonated': data.mine === true && data.state === 'revealed'}\"\n        (click)=\"squareClicked()\"\n        (contextmenu)=\"squareRightClicked($event)\"\n        >\n  <i class=\"bi {{value}}\"></i>\n</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}