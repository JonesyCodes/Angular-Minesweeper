{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-squares/grid-squares.component\";\nfunction GameGridComponent_app_grid_squares_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-grid-squares\", 5);\n    i0.ɵɵlistener(\"squareClickedEvent\", function GameGridComponent_app_grid_squares_7_Template_app_grid_squares_squareClickedEvent_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const idx_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.squareClicked(idx_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", s_r1);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"grid-template-columns\": a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\nexport class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.mines = 1;\n    this.columns = 5;\n    this.rows = 5;\n    this.gameOverEvent = new EventEmitter();\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    this.revealedEmpty = 0;\n    this.gameOver = false;\n  }\n  ngOnInit() {\n    this.setDimension();\n    this.setColumns = `repeat(${this.columns}, 50px)`;\n  }\n  //// Generate grid and randomise bomb locations\n  setDimension() {\n    this.squares = [];\n    let totalSquares = this.rows * this.columns;\n    for (let i = 0; i < totalSquares; i++) {\n      if (i < this.mines) {\n        const squareData = {\n          mine: true,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      } else {\n        const squareData = {\n          mine: false,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      }\n    }\n    this.squares.sort(() => Math.random() - 0.5);\n    let index = 0;\n    this.squares.forEach(() => {\n      let adjacentSquares = [];\n      if (index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - 1);\n      }\n      ; // left\n      if (index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + 1);\n      }\n      ; // right\n      if (index - this.columns >= 0) {\n        adjacentSquares.push(index - this.columns);\n      }\n      ; // top\n      if (index + this.columns < totalSquares) {\n        adjacentSquares.push(index + this.columns);\n      }\n      ; // bottom\n      if (index - this.columns - 1 >= 0 && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - this.columns - 1);\n      }\n      ; // top left\n      if (index - this.columns + 1 >= 0 && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index - this.columns + 1);\n      }\n      ; // top right\n      if (index + this.columns - 1 < totalSquares && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index + this.columns - 1);\n      }\n      ; // bottom left\n      if (index + this.columns + 1 < totalSquares && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + this.columns + 1);\n      }\n      ; // bottom right\n      this.squares[index].adjacent = adjacentSquares;\n      index++;\n    });\n  }\n  //// Event emitted from square, check for adjacent mines, if none repeat for adjacent squares\n  squareClicked(index) {\n    let square = this.squares[index];\n    let adjacentMines = 0;\n    square.adjacent?.forEach(index => {\n      if (this.checkForMine(index)) {\n        adjacentMines++;\n      }\n    });\n    square = {\n      state: 'revealed',\n      mine: square.mine,\n      adjacentMines: adjacentMines,\n      adjacent: square.adjacent\n    };\n    this.squares[index] = square;\n    if (adjacentMines == 0) {\n      square.adjacent?.forEach(check => {\n        if (this.squares[check].state == 'hidden') {\n          this.squareClicked(check);\n        }\n      });\n    }\n    this.checkForWin(square);\n  }\n  //// Checks if a square is a mine\n  checkForMine(index) {\n    let square = this.squares[index];\n    if (square.mine) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  checkForWin(currentSquare) {\n    if (currentSquare.mine) {\n      this.gameOverEvent.emit(false);\n      this.gameOver = true;\n    } else {\n      this.revealedEmpty++;\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {\n        this.gameOverEvent.emit(true);\n      }\n    }\n  }\n}\nGameGridComponent.ɵfac = function GameGridComponent_Factory(t) {\n  return new (t || GameGridComponent)();\n};\nGameGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameGridComponent,\n  selectors: [[\"app-game-grid\"]],\n  inputs: {\n    mines: \"mines\",\n    columns: \"columns\",\n    rows: \"rows\"\n  },\n  outputs: {\n    gameOverEvent: \"gameOverEvent\"\n  },\n  decls: 8,\n  vars: 8,\n  consts: [[1, \"gridComponent\"], [1, \"text-danger\"], [1, \"bi\", \"bi-exclamation-triangle-fill\"], [\"id\", \"minefield\", 1, \"grid\", 3, \"ngStyle\", \"ngClass\"], [3, \"data\", \"squareClickedEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\", \"squareClickedEvent\"]],\n  template: function GameGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n      i0.ɵɵelement(2, \"i\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelement(4, \"i\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\")(6, \"div\", 3);\n      i0.ɵɵtemplate(7, GameGridComponent_app_grid_squares_7_Template, 1, 1, \"app-grid-squares\", 4);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", ctx.title, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, ctx.setColumns))(\"ngClass\", i0.ɵɵpureFunction1(6, _c1, ctx.gameOver));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgStyle, i2.GridSquaresComponent],\n  styles: [\".grid[_ngcontent-%COMP%] {\\r\\n  display: grid;\\r\\n}\\r\\n\\r\\n.gridComponent[_ngcontent-%COMP%]{\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.disabled[_ngcontent-%COMP%] {\\r\\n  \\r\\n  opacity: 0.8;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1ncmlkL2dhbWUtZ3JpZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsWUFBWTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLmdyaWQge1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbn1cclxuXHJcbi5ncmlkQ29tcG9uZW50e1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4uZGlzYWJsZWQge1xyXG4gIC8qcG9pbnRlci1ldmVudHM6IG5vbmU7Ki9cclxuICBvcGFjaXR5OiAwLjg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","GameGridComponent","constructor","ngOnInit","setDimension","setColumns","columns","squares","totalSquares","rows","i","mines","squareData","mine","state","push","sort","Math","random","index","forEach","adjacentSquares","adjacent","squareClicked","square","adjacentMines","checkForMine","check","checkForWin","currentSquare","gameOverEvent","emit","gameOver","revealedEmpty","selectors","inputs","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.html"],"sourcesContent":["import { Component, ViewChild, ElementRef, ComponentRef, AfterViewInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GridSquaresComponent } from '../grid-squares/grid-squares.component';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-game-grid',\r\n  templateUrl: './game-grid.component.html',\r\n  styleUrls: ['./game-grid.component.css']\r\n})\r\nexport class GameGridComponent {\r\n  title = 'Minefield'\r\n\r\n  @Input() mines: number = 1;\r\n  @Input() columns: number = 5;\r\n  @Input() rows: number = 5;\r\n\r\n  @Output() gameOverEvent: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  colArray: number[] = [];\r\n  rowArray: number[] = [];\r\n  squares: SquareData[] = [];\r\n  revealedEmpty = 0;\r\n  setColumns: string | undefined;\r\n  gameOver: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.setDimension();\r\n    this.setColumns = `repeat(${this.columns}, 50px)`\r\n  }\r\n\r\n  //// Generate grid and randomise bomb locations\r\n  setDimension() {\r\n    this.squares = [];\r\n    let totalSquares = this.rows * this.columns;\r\n\r\n    for (let i = 0; i < totalSquares; i++) {\r\n\r\n      if (i < this.mines) {\r\n        const squareData: SquareData = {\r\n          mine: true,\r\n          state: 'hidden'\r\n        };\r\n\r\n        this.squares.push(squareData);\r\n      }\r\n      else {\r\n        const squareData: SquareData = {\r\n          mine: false,\r\n          state: 'hidden'\r\n        };\r\n        this.squares.push(squareData);\r\n      }\r\n    }\r\n\r\n    this.squares.sort(() => Math.random() - 0.5);\r\n\r\n    let index = 0;\r\n\r\n    this.squares.forEach(() => {\r\n      let adjacentSquares: number[] = [];\r\n      if ((index % this.columns) - 1 >= 0) { adjacentSquares.push(index - 1) }; // left\r\n      if ((index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + 1) }; // right\r\n      if (index - this.columns >= 0) { adjacentSquares.push(index - this.columns) }; // top\r\n      if (index + this.columns < totalSquares) { adjacentSquares.push(index + this.columns) }; // bottom\r\n      if ((index - this.columns) - 1 >= 0 && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index - this.columns - 1) }; // top left\r\n      if ((index - this.columns) + 1 >= 0 && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index - this.columns + 1) }; // top right\r\n      if ((index + this.columns) - 1 < totalSquares && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index + this.columns - 1) }; // bottom left\r\n      if ((index + this.columns) + 1 < totalSquares && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + this.columns + 1) }; // bottom right\r\n      this.squares[index].adjacent = adjacentSquares;\r\n      index++;\r\n    })\r\n  }\r\n\r\n  //// Event emitted from square, check for adjacent mines, if none repeat for adjacent squares\r\n  squareClicked(index: number) {\r\n    let square = this.squares[index];\r\n    let adjacentMines = 0;\r\n\r\n    square.adjacent?.forEach((index: number) => {\r\n      if (this.checkForMine(index)) {        \r\n        adjacentMines++;\r\n      }\r\n    })\r\n\r\n    square = { state: 'revealed', mine: square.mine, adjacentMines: adjacentMines, adjacent: square.adjacent };\r\n    this.squares[index] = square;\r\n\r\n    if (adjacentMines == 0) {\r\n      square.adjacent ?.forEach((check: number) => {\r\n        if (this.squares[check].state == 'hidden') {\r\n          this.squareClicked(check);\r\n        }\r\n      })\r\n    }\r\n\r\n    this.checkForWin(square);\r\n  }\r\n\r\n  //// Checks if a square is a mine\r\n  checkForMine(index: number) {\r\n    let square = this.squares[index];\r\n\r\n    if (square.mine) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  checkForWin(currentSquare: SquareData) {\r\n    if (currentSquare.mine) {\r\n      this.gameOverEvent.emit(false);\r\n      this.gameOver = true;\r\n    }\r\n    else {\r\n      this.revealedEmpty++;\r\n\r\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {      \r\n        this.gameOverEvent.emit(true);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"gridComponent\">\r\n  <h3 class=\"text-danger\"><i class=\"bi bi-exclamation-triangle-fill\"></i> {{title}} <i class=\"bi bi-exclamation-triangle-fill\"></i></h3>\r\n  <div>\r\n    <div id=\"minefield\" class=\"grid\" [ngStyle]=\"{'grid-template-columns': setColumns}\" [ngClass]=\"{'disabled': gameOver}\">\r\n      <app-grid-squares *ngFor=\"let s of squares; let idx=index\" [data]=\"s\" (squareClickedEvent)=\"squareClicked(idx)\"></app-grid-squares>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}