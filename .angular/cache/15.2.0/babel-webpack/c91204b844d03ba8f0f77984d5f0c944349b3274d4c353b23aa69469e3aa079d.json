{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\nlet CdTimerComponent = /*#__PURE__*/(() => {\n  class CdTimerComponent {\n    constructor(elt, renderer) {\n      this.elt = elt;\n      this.renderer = renderer;\n      this.onStart = new EventEmitter();\n      this.onStop = new EventEmitter();\n      this.onTick = new EventEmitter();\n      this.onComplete = new EventEmitter();\n      // Initialization\n      this.autoStart = true;\n      this.startTime = 0;\n      this.endTime = 0;\n      this.timeoutId = null;\n      this.countdown = false;\n      this.format = 'default';\n    }\n    ngAfterViewInit() {\n      const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n      this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n      if (this.autoStart === undefined || this.autoStart === true) {\n        this.start();\n      }\n    }\n    ngOnDestroy() {\n      this.resetTimeout();\n    }\n    /**\n     * Start the timer\n     */\n    start() {\n      this.initVar();\n      this.resetTimeout();\n      this.computeTimeUnits();\n      this.startTickCount();\n      this.onStart.emit(this);\n    }\n    /**\n     * Resume the timer\n     */\n    resume() {\n      this.resetTimeout();\n      this.startTickCount();\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n      this.clear();\n      this.onStop.emit(this);\n    }\n    /**\n     * Reset the timer\n     */\n    reset() {\n      this.initVar();\n      this.resetTimeout();\n      this.clear();\n      this.computeTimeUnits();\n      this.renderText();\n    }\n    /**\n     * Get the time information\n     * @returns TimeInterface\n     */\n    get() {\n      return {\n        seconds: this.seconds,\n        minutes: this.minutes,\n        hours: this.hours,\n        days: this.days,\n        timer: this.timeoutId,\n        tick_count: this.tickCounter\n      };\n    }\n    /**\n     * Initialize variable before start\n     */\n    initVar() {\n      this.startTime = this.startTime || 0;\n      this.endTime = this.endTime || 0;\n      this.countdown = this.countdown || false;\n      this.tickCounter = this.startTime;\n      // Disable countdown if start time not defined\n      if (this.countdown && this.startTime === 0) {\n        this.countdown = false;\n      }\n      // Determine auto format\n      if (!this.format) {\n        this.format = this.ngContentSchema.length > 5 ? 'user' : 'default';\n      }\n    }\n    /**\n     * Reset timeout\n     */\n    resetTimeout() {\n      if (this.timeoutId) {\n        clearInterval(this.timeoutId);\n      }\n    }\n    /**\n     * Render the time to DOM\n     */\n    renderText() {\n      let outputText;\n      if (this.format === 'user') {\n        // User presentation\n        const items = {\n          'seconds': this.seconds,\n          'minutes': this.minutes,\n          'hours': this.hours,\n          'days': this.days\n        };\n        outputText = this.ngContentSchema;\n        for (const key of Object.keys(items)) {\n          outputText = outputText.replace('[' + key + ']', items[key].toString());\n        }\n      } else if (this.format === 'intelli') {\n        // Intelli presentation\n        outputText = '';\n        if (this.days > 0) {\n          outputText += this.days.toString() + 'day' + (this.days > 1 ? 's' : '') + ' ';\n        }\n        if (this.hours > 0 || this.days > 0) {\n          outputText += this.hours.toString() + 'h ';\n        }\n        if ((this.minutes > 0 || this.hours > 0) && this.days === 0) {\n          outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n        }\n        if (this.hours === 0 && this.days === 0) {\n          outputText += this.seconds.toString().padStart(2, '0') + 's';\n        }\n      } else if (this.format === 'hms') {\n        // Hms presentation\n        outputText = this.hours.toString().padStart(2, '0') + ':';\n        outputText += this.minutes.toString().padStart(2, '0') + ':';\n        outputText += this.seconds.toString().padStart(2, '0');\n      } else if (this.format === 'ms') {\n        // ms presentation\n        outputText = '';\n        if (this.hours > 0) {\n          outputText = this.hours.toString().padStart(2, '0') + ':';\n        }\n        outputText += this.minutes.toString().padStart(2, '0') + ':';\n        outputText += this.seconds.toString().padStart(2, '0');\n      } else {\n        // Default presentation\n        outputText = this.days.toString() + 'd ';\n        outputText += this.hours.toString() + 'h ';\n        outputText += this.minutes.toString() + 'm ';\n        outputText += this.seconds.toString() + 's';\n      }\n      this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n    }\n    clear() {\n      this.resetTimeout();\n      this.timeoutId = null;\n    }\n    /**\n     * Compute each unit (seconds, minutes, hours, days) for further manipulation\n     * @protected\n     */\n    computeTimeUnits() {\n      if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n        this.seconds = Math.floor(this.tickCounter % 60);\n        this.minutes = Math.floor(this.tickCounter / 60 % 60);\n        this.hours = Math.floor(this.tickCounter / 3600 % 24);\n        this.days = Math.floor(this.tickCounter / 3600 / 24);\n      } else if (this.maxTimeUnit === 'second') {\n        this.seconds = this.tickCounter;\n        this.minutes = 0;\n        this.hours = 0;\n        this.days = 0;\n      } else if (this.maxTimeUnit === 'minute') {\n        this.seconds = Math.floor(this.tickCounter % 60);\n        this.minutes = Math.floor(this.tickCounter / 60);\n        this.hours = 0;\n        this.days = 0;\n      } else if (this.maxTimeUnit === 'hour') {\n        this.seconds = Math.floor(this.tickCounter % 60);\n        this.minutes = Math.floor(this.tickCounter / 60 % 60);\n        this.hours = Math.floor(this.tickCounter / 3600);\n        this.days = 0;\n      }\n      this.renderText();\n    }\n    /**\n     * Start tick count, base of this component\n     * @protected\n     */\n    startTickCount() {\n      const that = this;\n      that.timeoutId = setInterval(function () {\n        let counter;\n        if (that.countdown) {\n          // Compute finish counter for countdown\n          counter = that.tickCounter;\n          if (that.startTime > that.endTime) {\n            counter = that.tickCounter - that.endTime - 1;\n          }\n        } else {\n          // Compute finish counter for timer\n          counter = that.tickCounter - that.startTime;\n          if (that.endTime > that.startTime) {\n            counter = that.endTime - that.tickCounter - 1;\n          }\n        }\n        that.computeTimeUnits();\n        const timer = {\n          seconds: that.seconds,\n          minutes: that.minutes,\n          hours: that.hours,\n          days: that.days,\n          timer: that.timeoutId,\n          tick_count: that.tickCounter\n        };\n        that.onTick.emit(timer);\n        if (counter < 0) {\n          that.stop();\n          that.onComplete.emit(that);\n          return;\n        }\n        if (that.countdown) {\n          that.tickCounter--;\n        } else {\n          that.tickCounter++;\n        }\n      }, 1000); // Each seconds\n    }\n  }\n\n  CdTimerComponent.ɵfac = function CdTimerComponent_Factory(t) {\n    return new (t || CdTimerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  CdTimerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdTimerComponent,\n    selectors: [[\"cd-timer\"]],\n    inputs: {\n      startTime: \"startTime\",\n      endTime: \"endTime\",\n      countdown: \"countdown\",\n      autoStart: \"autoStart\",\n      maxTimeUnit: \"maxTimeUnit\",\n      format: \"format\"\n    },\n    outputs: {\n      onStart: \"onStart\",\n      onStop: \"onStop\",\n      onTick: \"onTick\",\n      onComplete: \"onComplete\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function CdTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return CdTimerComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CdTimerModule = /*#__PURE__*/(() => {\n  class CdTimerModule {}\n  CdTimerModule.ɵfac = function CdTimerModule_Factory(t) {\n    return new (t || CdTimerModule)();\n  };\n  CdTimerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CdTimerModule\n  });\n  CdTimerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return CdTimerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule };\n//# sourceMappingURL=angular-cd-timer.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}