{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-squares/grid-squares.component\";\nfunction GameGridComponent_app_grid_squares_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-grid-squares\", 3);\n    i0.ɵɵlistener(\"squareClickedEvent\", function GameGridComponent_app_grid_squares_6_Template_app_grid_squares_squareClickedEvent_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const idx_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.squareClicked(idx_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", s_r1);\n  }\n}\nexport class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    this.columns = 5;\n    this.rows = 10;\n    this.mines = 6;\n  }\n  ngOnInit() {}\n  //// Generate grid and randomise bomb locations\n  setDimension() {\n    this.squares = [];\n    let totalSquares = this.rows * this.columns;\n    for (let i = 0; i < totalSquares; i++) {\n      if (i < this.mines) {\n        const squareData = {\n          mine: true,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      } else {\n        const squareData = {\n          mine: false,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      }\n    }\n    this.squares.sort(() => Math.random() - 0.5);\n    let index = 0;\n    this.squares.forEach(() => {\n      let adjacentSquares = [];\n      if (index % this.columns - 1 > 0) {\n        adjacentSquares.push(index - 1);\n      }\n      ;\n      if (index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + 1);\n      }\n      ;\n      if (index - this.columns >= 0) {\n        adjacentSquares.push(index - this.columns);\n      }\n      ;\n      if (index + this.columns < totalSquares) {\n        adjacentSquares.push(index + this.columns);\n      }\n      ;\n      this.squares[index].adjacent = adjacentSquares;\n      index++;\n    });\n  }\n  //// Event emitted from square, use coordinates to select adjacent squares\n  squareClicked(index) {\n    let square = this.squares[index];\n    let adjacentMines = 0;\n    square.adjacent?.forEach(index => {\n      if (!this.checkBomb(index - 1)) {\n        //this.squareClicked(index - 1);\n      } else {\n        adjacentMines++;\n      }\n    });\n    //if ((index % this.columns) - 1  >= 0) {\n    //  if (!this.checkBomb(index - 1)) {\n    //    //this.squareClicked(index - 1);\n    //  }\n    //  else {\n    //    adjacentMines++;\n    //  }\n    //}\n    //if ((index % this.columns) + 1 < this.columns) {\n    //  if (!this.checkBomb(index + 1)) {\n    //    //this.squareClicked(index + 1);\n    //  }\n    //  else {\n    //    adjacentMines++;\n    //  }\n    //}\n    //if (index - this.columns >= 0) {\n    //  if (!this.checkBomb(index - this.columns)) {\n    //    //this.squareClicked(index - this.columns);\n    //  }\n    //  else {\n    //    adjacentMines++;\n    //  }\n    //}\n    //if (index + this.columns < this.squares.length) {\n    //  if (!this.checkBomb(index + this.columns)) {\n    //    //this.squareClicked(index + this.columns);\n    //  }\n    //  else {\n    //    adjacentMines++;\n    //  }\n    //}\n    square = {\n      state: 'revealed',\n      mine: square.mine,\n      adjacentMines: adjacentMines\n    };\n    this.squares[index] = square;\n  }\n  checkBomb(index) {\n    let square = this.squares[index];\n    if (square.mine) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nGameGridComponent.ɵfac = function GameGridComponent_Factory(t) {\n  return new (t || GameGridComponent)();\n};\nGameGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameGridComponent,\n  selectors: [[\"app-game-grid\"]],\n  decls: 7,\n  vars: 2,\n  consts: [[3, \"click\"], [\"id\", \"minefield\", 1, \"grid\"], [3, \"data\", \"squareClickedEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\", \"squareClickedEvent\"]],\n  template: function GameGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GameGridComponent_Template_button_click_3_listener() {\n        return ctx.setDimension();\n      });\n      i0.ɵɵtext(4, \"Generate grid\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵtemplate(6, GameGridComponent_app_grid_squares_6_Template, 1, 1, \"app-grid-squares\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.GridSquaresComponent],\n  styles: [\".grid[_ngcontent-%COMP%] {\\r\\n  display: grid;\\r\\n  grid-template-columns: repeat(5, 75px);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1ncmlkL2dhbWUtZ3JpZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHNDQUFzQztBQUN4QyIsInNvdXJjZXNDb250ZW50IjpbIi5ncmlkIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDc1cHgpO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","GameGridComponent","constructor","ngOnInit","setDimension","squares","totalSquares","rows","columns","i","mines","squareData","mine","state","push","sort","Math","random","index","forEach","adjacentSquares","adjacent","squareClicked","square","adjacentMines","checkBomb","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.html","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts"],"sourcesContent":["<h3>{{title}}</h3>\n\n<div>\n  <!--<input type=\"number\" [(ngModel)]=\"rows\" />\n  <input type=\"number\" [(ngModel)]=\"columns\" />-->\n  <button (click)=\"setDimension()\">Generate grid</button>\n\n  <div id=\"minefield\" class=\"grid\">\n    <app-grid-squares *ngFor=\"let s of squares; let idx=index\" [data]=\"s\" (squareClickedEvent)=\"squareClicked(idx)\"></app-grid-squares>\n  </div>\n\n</div>\n","import { Component, ViewChild, ElementRef, ComponentRef, AfterViewInit } from '@angular/core';\r\nimport { GridSquaresComponent } from '../grid-squares/grid-squares.component';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-game-grid',\r\n  templateUrl: './game-grid.component.html',\r\n  styleUrls: ['./game-grid.component.css']\r\n})\r\nexport class GameGridComponent {\r\n  title = 'Minefield'\r\n\r\n  colArray: number[] = [];\r\n  rowArray: number[] = [];\r\n  squares: SquareData[] = [];\r\n  columns = 5;\r\n  rows = 10;\r\n  mines = 6;\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  //// Generate grid and randomise bomb locations\r\n  setDimension() {\r\n    this.squares = [];\r\n    let totalSquares = this.rows * this.columns;\r\n\r\n    for (let i = 0; i < totalSquares; i++) {\r\n\r\n      if (i < this.mines) {\r\n        const squareData: SquareData = {\r\n          mine: true,\r\n          state: 'hidden'\r\n        };\r\n\r\n        this.squares.push(squareData);\r\n      }\r\n      else {\r\n        const squareData: SquareData = {\r\n          mine: false,\r\n          state: 'hidden'\r\n        };\r\n        this.squares.push(squareData);\r\n      }\r\n    }\r\n\r\n    this.squares.sort(() => Math.random() - 0.5);\r\n\r\n    let index = 0;\r\n\r\n    this.squares.forEach(() => {\r\n      let adjacentSquares: number[] = [];\r\n      if ((index % this.columns) - 1 > 0) { adjacentSquares.push(index - 1) };\r\n      if ((index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + 1) };\r\n      if (index - this.columns >= 0) { adjacentSquares.push(index - this.columns) };\r\n      if (index + this.columns < totalSquares) { adjacentSquares.push(index + this.columns) };\r\n\r\n      this.squares[index].adjacent = adjacentSquares;\r\n      index++;\r\n    })\r\n\r\n  }\r\n\r\n  //// Event emitted from square, use coordinates to select adjacent squares\r\n  squareClicked(index: number) {\r\n    let square = this.squares[index];\r\n    let adjacentMines = 0;\r\n\r\n    square.adjacent?.forEach((index: number) => {\r\n      if (!this.checkBomb(index - 1)) {\r\n        //this.squareClicked(index - 1);\r\n      }\r\n      else {\r\n        adjacentMines++;\r\n      }\r\n    })\r\n\r\n    //if ((index % this.columns) - 1  >= 0) {\r\n    //  if (!this.checkBomb(index - 1)) {\r\n    //    //this.squareClicked(index - 1);\r\n    //  }\r\n    //  else {\r\n    //    adjacentMines++;\r\n    //  }\r\n    //}\r\n\r\n    //if ((index % this.columns) + 1 < this.columns) {\r\n    //  if (!this.checkBomb(index + 1)) {\r\n    //    //this.squareClicked(index + 1);\r\n    //  }\r\n    //  else {\r\n    //    adjacentMines++;\r\n    //  }\r\n    //}\r\n\r\n    //if (index - this.columns >= 0) {\r\n    //  if (!this.checkBomb(index - this.columns)) {\r\n    //    //this.squareClicked(index - this.columns);\r\n    //  }\r\n    //  else {\r\n    //    adjacentMines++;\r\n    //  }\r\n    //}\r\n\r\n    //if (index + this.columns < this.squares.length) {\r\n    //  if (!this.checkBomb(index + this.columns)) {\r\n    //    //this.squareClicked(index + this.columns);\r\n    //  }\r\n    //  else {\r\n    //    adjacentMines++;\r\n    //  }\r\n    //}\r\n\r\n    square = { state: 'revealed', mine: square.mine, adjacentMines: adjacentMines };\r\n    this.squares[index] = square;\r\n  }\r\n\r\n  checkBomb(index: number) {\r\n    let square = this.squares[index];\r\n\r\n    if (square.mine) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}