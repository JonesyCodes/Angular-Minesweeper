{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewContainerRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nlet GameStatusComponent = class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.flagCount = 0;\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.gameMessage = new EventEmitter();\n  }\n  ngOnInit() {\n    this.newGame();\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.mines = this.mineCount;\n    component.instance.columns = this.columnCount;\n    component.instance.rows = this.rowCount;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    component.instance.flagEvent.subscribe(value => this.changeFlagCount(value));\n    this.flagCount = 0;\n    this.gameMessage.emit('New mines buried');\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    if (win) {\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\n    } else {\n      this.gameMessage.emit('Go watch The Hurt Locker');\n    }\n  }\n  changeFlagCount(flagAdded) {\n    if (flagAdded) {\n      this.flagCount++;\n    } else {\n      this.flagCount--;\n    }\n  }\n};\n__decorate([Input()], GameStatusComponent.prototype, \"mineCount\", void 0);\n__decorate([Input()], GameStatusComponent.prototype, \"rowCount\", void 0);\n__decorate([Input()], GameStatusComponent.prototype, \"columnCount\", void 0);\n__decorate([Output()], GameStatusComponent.prototype, \"gameMessage\", void 0);\n__decorate([ViewChild('placeholder', {\n  read: ViewContainerRef,\n  static: true\n})], GameStatusComponent.prototype, \"placeholder\", void 0);\nGameStatusComponent = __decorate([Component({\n  selector: 'app-game-status',\n  templateUrl: './game-status.component.html',\n  styleUrls: ['./game-status.component.css']\n})], GameStatusComponent);\nexport { GameStatusComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,gBAAgB,EAAgBC,SAAS,EAAmEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAClL,SAASC,iBAAiB,QAAQ,kCAAkC;AAO7D,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAY9BC,YAAoBC,QAAkC,EAAUC,QAAkB;IAA9D,aAAQ,GAARD,QAAQ;IAAoC,aAAQ,GAARC,QAAQ;IAXxE,UAAK,GAAG,YAAY;IACpB,cAAS,GAAG,CAAC;IAEJ,cAAS,GAAW,CAAC;IACrB,aAAQ,GAAW,CAAC;IACpB,gBAAW,GAAW,CAAC;IAEtB,gBAAW,GAAyB,IAAIL,YAAY,EAAE;EAIqB;EAErFM,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEA;EACAA,OAAO;IACL,IAAI,CAACC,WAAW,CAACC,MAAM,EAAE;IACzB,MAAMC,gBAAgB,GAAG,IAAI,CAACN,QAAQ,CAACO,uBAAuB,CAACV,iBAAiB,CAAC;IACjF,MAAMW,SAAS,GAAGF,gBAAgB,CAACG,MAAM,CAAC,IAAI,CAACR,QAAQ,CAAC;IACxD,IAAI,CAACG,WAAW,CAACM,MAAM,CAACF,SAAS,CAACG,QAAQ,CAAC;IAE3CH,SAAS,CAACI,QAAQ,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS;IAEzCN,SAAS,CAACI,QAAQ,CAACG,OAAO,GAAG,IAAI,CAACC,WAAW;IAC7CR,SAAS,CAACI,QAAQ,CAACK,IAAI,GAAG,IAAI,CAACC,QAAQ;IAEvCV,SAAS,CAACI,QAAQ,CAACO,aAAa,CAACC,SAAS,CAAEC,KAAK,IAAK,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,CAAC;IAC3Eb,SAAS,CAACI,QAAQ,CAACW,SAAS,CAACH,SAAS,CAAEC,KAAK,IAAK,IAAI,CAACG,eAAe,CAACH,KAAK,CAAC,CAAC;IAE9E,IAAI,CAACI,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,kBAAkB,CAAC;EAC3C;EAEA;EACAL,QAAQ,CAACM,GAAY;IACnB,IAAIA,GAAG,EAAE;MACP,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC,0CAA0C,CAAC;KAClE,MACI;MACH,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,0BAA0B,CAAC;;EAErD;EAEAH,eAAe,CAACK,SAAkB;IAChC,IAAIA,SAAS,EAAE;MACb,IAAI,CAACJ,SAAS,EAAE;KACjB,MACI;MACH,IAAI,CAACA,SAAS,EAAE;;EAEpB;CAKD;AAvDUK,YAARpC,KAAK,EAAE,sDAAuB;AACtBoC,YAARpC,KAAK,EAAE,qDAAsB;AACrBoC,YAARpC,KAAK,EAAE,wDAAyB;AAEvBoC,YAATnC,MAAM,EAAE,wDAAwD;AAGjEmC,YADCrC,SAAS,CAAC,aAAa,EAAE;EAAEsC,IAAI,EAAEvC,gBAAgB;EAAEwC,MAAM,EAAE;AAAI,CAAE,CAAC,wDAC7B;AAX3BlC,mBAAmB,eAL/BP,SAAS,CAAC;EACT0C,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWrC,mBAAmB,CA2D/B;SA3DYA,mBAAmB","names":["Component","ViewContainerRef","ViewChild","Input","Output","EventEmitter","GameGridComponent","GameStatusComponent","constructor","resolver","injector","ngOnInit","newGame","placeholder","detach","componentFactory","resolveComponentFactory","component","create","insert","hostView","instance","mines","mineCount","columns","columnCount","rows","rowCount","gameOverEvent","subscribe","value","gameOver","flagEvent","changeFlagCount","flagCount","gameMessage","emit","win","flagAdded","__decorate","read","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.ts"],"sourcesContent":["import { Component, ViewContainerRef, ComponentRef, ViewChild, QueryList, ComponentFactoryResolver, Injector, ComponentFactory, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GameGridComponent } from '../game-grid/game-grid.component';\r\n\r\n@Component({\r\n  selector: 'app-game-status',\r\n  templateUrl: './game-status.component.html',\r\n  styleUrls: ['./game-status.component.css']\r\n})\r\nexport class GameStatusComponent {\r\n  title = 'Status Bar'\r\n  flagCount = 0;\r\n\r\n  @Input() mineCount: number = 3;\r\n  @Input() rowCount: number = 5;\r\n  @Input() columnCount: number = 5;\r\n\r\n  @Output() gameMessage: EventEmitter<string> = new EventEmitter();\r\n\r\n  @ViewChild('placeholder', { read: ViewContainerRef, static: true })\r\n  public placeholder!: ViewContainerRef;\r\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {}\r\n\r\n  ngOnInit() {\r\n    this.newGame();\r\n  }\r\n\r\n  //// Generate new minefield and clear game message\r\n  newGame() {\r\n    this.placeholder.detach();\r\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\r\n    const component = componentFactory.create(this.injector);\r\n    this.placeholder.insert(component.hostView);\r\n\r\n    component.instance.mines = this.mineCount;\r\n\r\n    component.instance.columns = this.columnCount;\r\n    component.instance.rows = this.rowCount;\r\n\r\n    component.instance.gameOverEvent.subscribe((value) => this.gameOver(value));\r\n    component.instance.flagEvent.subscribe((value) => this.changeFlagCount(value));\r\n\r\n    this.flagCount = 0;\r\n    this.gameMessage.emit('New mines buried');\r\n  }\r\n\r\n  //// Create game message based on game result\r\n  gameOver(win: boolean) {\r\n    if (win) {      \r\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\r\n    }\r\n    else {\r\n      this.gameMessage.emit('Go watch The Hurt Locker');\r\n    }\r\n  }\r\n\r\n  changeFlagCount(flagAdded: boolean) {\r\n    if (flagAdded) {\r\n      this.flagCount++;\r\n    }\r\n    else {\r\n      this.flagCount--;\r\n    }\r\n  }\r\n\r\n  //toggleIsActive(event: Event) {\r\n  //  console.log(event.target[':checked']);\r\n  //}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}