{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nlet GameGridComponent = class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.mines = 1;\n    this.columns = 5;\n    this.rows = 5;\n    this.gameOverEvent = new EventEmitter();\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    this.revealedEmpty = 0;\n    this.gameOver = false;\n  }\n  ngOnInit() {\n    this.setDimension();\n    this.setColumns = `repeat(${this.columns}, 50px)`;\n  }\n  //// Generate grid and randomise bomb locations\n  setDimension() {\n    this.squares = [];\n    let totalSquares = this.rows * this.columns;\n    for (let i = 0; i < totalSquares; i++) {\n      if (i < this.mines) {\n        const squareData = {\n          mine: true,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      } else {\n        const squareData = {\n          mine: false,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      }\n    }\n    this.squares.sort(() => Math.random() - 0.5);\n    let index = 0;\n    this.squares.forEach(() => {\n      let adjacentSquares = [];\n      if (index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - 1);\n      }\n      ; // left\n      if (index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + 1);\n      }\n      ; // right\n      if (index - this.columns >= 0) {\n        adjacentSquares.push(index - this.columns);\n      }\n      ; // top\n      if (index + this.columns < totalSquares) {\n        adjacentSquares.push(index + this.columns);\n      }\n      ; // bottom\n      if (index - this.columns - 1 >= 0 && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index - this.columns - 1);\n      }\n      ; // top left\n      if (index - this.columns + 1 >= 0 && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index - this.columns + 1);\n      }\n      ; // top right\n      if (index + this.columns - 1 < totalSquares && index % this.columns - 1 >= 0) {\n        adjacentSquares.push(index + this.columns - 1);\n      }\n      ; // bottom left\n      if (index + this.columns + 1 < totalSquares && index % this.columns + 1 < this.columns) {\n        adjacentSquares.push(index + this.columns + 1);\n      }\n      ; // bottom right\n      this.squares[index].adjacent = adjacentSquares;\n      index++;\n    });\n  }\n  //// Event emitted from square, check for adjacent mines, if none repeat for adjacent squares\n  squareClicked(index) {\n    let square = this.squares[index];\n    let adjacentMines = 0;\n    square.adjacent?.forEach(index => {\n      if (this.checkForMine(index)) {\n        adjacentMines++;\n      }\n    });\n    square = {\n      state: 'revealed',\n      mine: square.mine,\n      adjacentMines: adjacentMines,\n      adjacent: square.adjacent\n    };\n    this.squares[index] = square;\n    if (adjacentMines == 0) {\n      square.adjacent?.forEach(check => {\n        if (this.squares[check].state == 'hidden') {\n          this.squareClicked(check);\n        }\n      });\n    }\n    this.checkForWin(square);\n  }\n  //// Checks if a square is a mine\n  checkForMine(index) {\n    let square = this.squares[index];\n    if (square.mine) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  checkForWin(currentSquare) {\n    if (currentSquare.mine) {\n      this.gameOverEvent.emit(false);\n      this.gameOver = true;\n    } else {\n      this.revealedEmpty++;\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {\n        this.gameOverEvent.emit(true);\n      }\n    }\n  }\n};\n__decorate([Input()], GameGridComponent.prototype, \"mines\", void 0);\n__decorate([Input()], GameGridComponent.prototype, \"columns\", void 0);\n__decorate([Input()], GameGridComponent.prototype, \"rows\", void 0);\n__decorate([Output()], GameGridComponent.prototype, \"gameOverEvent\", void 0);\nGameGridComponent = __decorate([Component({\n  selector: 'app-game-grid',\n  templateUrl: './game-grid.component.html',\n  styleUrls: ['./game-grid.component.css']\n})], GameGridComponent);\nexport { GameGridComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","Output","EventEmitter","GameGridComponent","constructor","ngOnInit","setDimension","setColumns","columns","squares","totalSquares","rows","i","mines","squareData","mine","state","push","sort","Math","random","index","forEach","adjacentSquares","adjacent","squareClicked","square","adjacentMines","checkForMine","check","checkForWin","currentSquare","gameOverEvent","emit","gameOver","revealedEmpty","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts"],"sourcesContent":["import { Component, ViewChild, ElementRef, ComponentRef, AfterViewInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GridSquaresComponent } from '../grid-squares/grid-squares.component';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-game-grid',\r\n  templateUrl: './game-grid.component.html',\r\n  styleUrls: ['./game-grid.component.css']\r\n})\r\nexport class GameGridComponent {\r\n  title = 'Minefield'\r\n\r\n  @Input() mines: number = 1;\r\n  @Input() columns: number = 5;\r\n  @Input() rows: number = 5;\r\n\r\n  @Output() gameOverEvent: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  colArray: number[] = [];\r\n  rowArray: number[] = [];\r\n  squares: SquareData[] = [];\r\n  revealedEmpty = 0;\r\n  setColumns: string | undefined;\r\n  gameOver: boolean = false;\r\n\r\n  ngOnInit() {\r\n    this.setDimension();\r\n    this.setColumns = `repeat(${this.columns}, 50px)`\r\n  }\r\n\r\n  //// Generate grid and randomise bomb locations\r\n  setDimension() {\r\n    this.squares = [];\r\n    let totalSquares = this.rows * this.columns;\r\n\r\n    for (let i = 0; i < totalSquares; i++) {\r\n\r\n      if (i < this.mines) {\r\n        const squareData: SquareData = {\r\n          mine: true,\r\n          state: 'hidden'\r\n        };\r\n\r\n        this.squares.push(squareData);\r\n      }\r\n      else {\r\n        const squareData: SquareData = {\r\n          mine: false,\r\n          state: 'hidden'\r\n        };\r\n        this.squares.push(squareData);\r\n      }\r\n    }\r\n\r\n    this.squares.sort(() => Math.random() - 0.5);\r\n\r\n    let index = 0;\r\n\r\n    this.squares.forEach(() => {\r\n      let adjacentSquares: number[] = [];\r\n      if ((index % this.columns) - 1 >= 0) { adjacentSquares.push(index - 1) }; // left\r\n      if ((index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + 1) }; // right\r\n      if (index - this.columns >= 0) { adjacentSquares.push(index - this.columns) }; // top\r\n      if (index + this.columns < totalSquares) { adjacentSquares.push(index + this.columns) }; // bottom\r\n      if ((index - this.columns) - 1 >= 0 && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index - this.columns - 1) }; // top left\r\n      if ((index - this.columns) + 1 >= 0 && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index - this.columns + 1) }; // top right\r\n      if ((index + this.columns) - 1 < totalSquares && (index % this.columns) - 1 >= 0) { adjacentSquares.push(index + this.columns - 1) }; // bottom left\r\n      if ((index + this.columns) + 1 < totalSquares && (index % this.columns) + 1 < this.columns) { adjacentSquares.push(index + this.columns + 1) }; // bottom right\r\n      this.squares[index].adjacent = adjacentSquares;\r\n      index++;\r\n    })\r\n  }\r\n\r\n  //// Event emitted from square, check for adjacent mines, if none repeat for adjacent squares\r\n  squareClicked(index: number) {\r\n    let square = this.squares[index];\r\n    let adjacentMines = 0;\r\n\r\n    square.adjacent?.forEach((index: number) => {\r\n      if (this.checkForMine(index)) {        \r\n        adjacentMines++;\r\n      }\r\n    })\r\n\r\n    square = { state: 'revealed', mine: square.mine, adjacentMines: adjacentMines, adjacent: square.adjacent };\r\n    this.squares[index] = square;\r\n\r\n    if (adjacentMines == 0) {\r\n      square.adjacent ?.forEach((check: number) => {\r\n        if (this.squares[check].state == 'hidden') {\r\n          this.squareClicked(check);\r\n        }\r\n      })\r\n    }\r\n\r\n    this.checkForWin(square);\r\n  }\r\n\r\n  //// Checks if a square is a mine\r\n  checkForMine(index: number) {\r\n    let square = this.squares[index];\r\n\r\n    if (square.mine) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  checkForWin(currentSquare: SquareData) {\r\n    if (currentSquare.mine) {\r\n      this.gameOverEvent.emit(false);\r\n      this.gameOver = true;\r\n    }\r\n    else {\r\n      this.revealedEmpty++;\r\n\r\n      if (this.revealedEmpty == this.columns * this.rows - this.mines) {      \r\n        this.gameOverEvent.emit(true);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}