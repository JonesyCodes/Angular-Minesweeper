{"ast":null,"code":"import { ViewContainerRef, EventEmitter } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"placeholder\"];\nfunction GameStatusComponent_ng_template_5_Template(rf, ctx) {}\nexport class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.gameMessage = new EventEmitter();\n  }\n  ngOnInit() {\n    this.newGame();\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.mines = this.mineCount;\n    component.instance.columns = this.columnCount;\n    component.instance.rows = this.rowCount;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    this.gameMessage.emit('New mines buried');\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    if (win) {\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\n    } else {\n      this.gameMessage.emit('Go watch The Hurt Locker');\n    }\n  }\n}\nGameStatusComponent.ɵfac = function GameStatusComponent_Factory(t) {\n  return new (t || GameStatusComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector));\n};\nGameStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameStatusComponent,\n  selectors: [[\"app-game-status\"]],\n  viewQuery: function GameStatusComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  inputs: {\n    mineCount: \"mineCount\",\n    rowCount: \"rowCount\",\n    columnCount: \"columnCount\"\n  },\n  outputs: {\n    gameMessage: \"gameMessage\"\n  },\n  decls: 7,\n  vars: 0,\n  consts: [[\"id\", \"resetDiv\"], [\"id\", \"resetGame\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-recycle\"], [\"id\", \"gridDiv\"], [\"id\", \"gameGrid\"], [\"placeholder\", \"\"]],\n  template: function GameStatusComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function GameStatusComponent_Template_button_click_1_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(2, \"Reset\\u00A0\");\n      i0.ɵɵelement(3, \"i\", 2);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 3);\n      i0.ɵɵtemplate(5, GameStatusComponent_ng_template_5_Template, 0, 0, \"ng-template\", 4, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#resetGame[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-self: flex-end;\\r\\n}\\r\\n\\r\\n#resetDiv[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zdGF0dXMvZ2FtZS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiI3Jlc2V0R2FtZSB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxufVxyXG5cclxuI3Jlc2V0RGl2IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,gBAAgB,EAA2GC,YAAY,QAAQ,eAAe;AAClL,SAASC,iBAAiB,QAAQ,kCAAkC;;;;AAOpE,OAAM,MAAOC,mBAAmB;EAU9BC,YAAoBC,QAAkC,EAAUC,QAAkB;IAA9D,aAAQ,GAARD,QAAQ;IAAoC,aAAQ,GAARC,QAAQ;IATxE,UAAK,GAAG,YAAY;IACX,cAAS,GAAW,CAAC;IACrB,aAAQ,GAAW,CAAC;IACpB,gBAAW,GAAW,CAAC;IAEtB,gBAAW,GAAyB,IAAIL,YAAY,EAAE;EAIqB;EAErFM,QAAQ;IACN,IAAI,CAACC,OAAO,EAAE;EAChB;EAEA;EACAA,OAAO;IACL,IAAI,CAACC,WAAW,CAACC,MAAM,EAAE;IACzB,MAAMC,gBAAgB,GAAG,IAAI,CAACN,QAAQ,CAACO,uBAAuB,CAACV,iBAAiB,CAAC;IACjF,MAAMW,SAAS,GAAGF,gBAAgB,CAACG,MAAM,CAAC,IAAI,CAACR,QAAQ,CAAC;IACxD,IAAI,CAACG,WAAW,CAACM,MAAM,CAACF,SAAS,CAACG,QAAQ,CAAC;IAE3CH,SAAS,CAACI,QAAQ,CAACC,KAAK,GAAG,IAAI,CAACC,SAAS;IAEzCN,SAAS,CAACI,QAAQ,CAACG,OAAO,GAAG,IAAI,CAACC,WAAW;IAC7CR,SAAS,CAACI,QAAQ,CAACK,IAAI,GAAG,IAAI,CAACC,QAAQ;IAEvCV,SAAS,CAACI,QAAQ,CAACO,aAAa,CAACC,SAAS,CAAEC,KAAK,IAAK,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,CAAC;IAE3E,IAAI,CAACE,WAAW,CAACC,IAAI,CAAC,kBAAkB,CAAC;EAC3C;EAEA;EACAF,QAAQ,CAACG,GAAY;IACnB,IAAIA,GAAG,EAAE;MACP,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC,0CAA0C,CAAC;KAClE,MACI;MACH,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,0BAA0B,CAAC;;EAErD;;AAzCW1B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA4B;EAAAC;IAAA;6BAQIhC,gBAAgB;;;;;;;;;;;;;;;;;;;;MChBpDiC,8BAAmB;MACgCA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,2BAAW;MAAAA,uBAA6B;MAAAA,iBAAS;MAaxHA,8BAAkB;MAChBA,kHAAsD;MACxDA,iBAAM","names":["ViewContainerRef","EventEmitter","GameGridComponent","GameStatusComponent","constructor","resolver","injector","ngOnInit","newGame","placeholder","detach","componentFactory","resolveComponentFactory","component","create","insert","hostView","instance","mines","mineCount","columns","columnCount","rows","rowCount","gameOverEvent","subscribe","value","gameOver","gameMessage","emit","win","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.html"],"sourcesContent":["import { Component, ViewContainerRef, ComponentRef, ViewChild, QueryList, ComponentFactoryResolver, Injector, ComponentFactory, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GameGridComponent } from '../game-grid/game-grid.component';\r\n\r\n@Component({\r\n  selector: 'app-game-status',\r\n  templateUrl: './game-status.component.html',\r\n  styleUrls: ['./game-status.component.css']\r\n})\r\nexport class GameStatusComponent {\r\n  title = 'Status Bar'\r\n  @Input() mineCount: number = 3;\r\n  @Input() rowCount: number = 5;\r\n  @Input() columnCount: number = 5;\r\n\r\n  @Output() gameMessage: EventEmitter<string> = new EventEmitter();\r\n\r\n  @ViewChild('placeholder', { read: ViewContainerRef, static: true })\r\n  public placeholder!: ViewContainerRef;\r\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {}\r\n\r\n  ngOnInit() {\r\n    this.newGame();\r\n  }\r\n\r\n  //// Generate new minefield and clear game message\r\n  newGame() {\r\n    this.placeholder.detach();\r\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\r\n    const component = componentFactory.create(this.injector);\r\n    this.placeholder.insert(component.hostView);\r\n\r\n    component.instance.mines = this.mineCount;\r\n\r\n    component.instance.columns = this.columnCount;\r\n    component.instance.rows = this.rowCount;\r\n\r\n    component.instance.gameOverEvent.subscribe((value) => this.gameOver(value));\r\n\r\n    this.gameMessage.emit('New mines buried');\r\n  }\r\n\r\n  //// Create game message based on game result\r\n  gameOver(win: boolean) {\r\n    if (win) {      \r\n      this.gameMessage.emit(`Congrats! You're basically Jeremy Renner`);\r\n    }\r\n    else {\r\n      this.gameMessage.emit('Go watch The Hurt Locker');\r\n    }\r\n  }\r\n}\r\n","<div id=\"resetDiv\">\r\n  <button id=\"resetGame\" class=\"btn btn-secondary\" (click)=\"newGame()\">Reset&nbsp;<i class=\"bi bi-recycle\"></i></button>\r\n</div>\r\n<!--<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <label>Mines: {{mineCount}}</label>\r\n    </div>\r\n    <div class=\"col\">\r\n      <label>Time Spent: </label>\r\n    </div>\r\n  </div>\r\n</div>-->\r\n\r\n<div id=\"gridDiv\">\r\n  <ng-template #placeholder id=\"gameGrid\"></ng-template>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}