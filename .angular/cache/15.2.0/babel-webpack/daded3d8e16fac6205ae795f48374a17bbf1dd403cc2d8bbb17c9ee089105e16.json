{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-squares/grid-squares.component\";\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\nfunction GameGridComponent_tr_7_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelement(1, \"app-grid-squares\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const j_r5 = ctx.index;\n    const i_r2 = i0.ɵɵnextContext().index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"bomb\", ctx_r3.bombArray[i_r2 * ctx_r3.columns + j_r5])(\"coordinates\", i0.ɵɵpureFunction2(2, _c0, j_r5, i_r2));\n  }\n}\nfunction GameGridComponent_tr_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, GameGridComponent_tr_7_td_1_Template, 2, 5, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.colArray);\n  }\n}\nexport class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.colArray = [];\n    this.rowArray = [];\n    this.bombArray = [];\n    this.columns = 4;\n    this.rows = 10;\n    this.bombs = 6;\n  }\n  setDimension() {\n    this.colArray = [];\n    this.rowArray = [];\n    for (let i = 0; i < this.columns; i++) {\n      this.colArray.push(i);\n    }\n    for (let i = 0; i < this.rows; i++) {\n      this.rowArray.push(i);\n    }\n    for (let i = 0; i < this.rows * this.columns; i++) {\n      if (i < this.bombs) {\n        this.bombArray.push(true);\n      } else {\n        this.bombArray.push(false);\n      }\n    }\n    this.bombArray.sort(() => Math.random() - 0.5);\n  }\n  checkAdjacentSquares(coordinates) {\n    let row = coordinates[1];\n    let j = coordinates[0];\n    if (j - 1 >= 0) {}\n    if (j + 1 < this.columns) {}\n    if (row - 1 >= 0) {}\n    if (row + 1 < this.rows) {}\n  }\n}\nGameGridComponent.ɵfac = function GameGridComponent_Factory(t) {\n  return new (t || GameGridComponent)();\n};\nGameGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameGridComponent,\n  selectors: [[\"app-game-grid\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[3, \"click\"], [\"id\", \"minefield\", 1, \"table\"], [4, \"ngFor\", \"ngForOf\"], [3, \"sendCoordinatesEvent\"], [3, \"bomb\", \"coordinates\"]],\n  template: function GameGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GameGridComponent_Template_button_click_3_listener() {\n        return ctx.setDimension();\n      });\n      i0.ɵɵtext(4, \"Generate grid\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"table\", 1)(6, \"tbody\");\n      i0.ɵɵtemplate(7, GameGridComponent_tr_7_Template, 2, 1, \"tr\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(8, \"app-grid-squares\", 3);\n      i0.ɵɵlistener(\"sendCoordinatesEvent\", function GameGridComponent_Template_app_grid_squares_sendCoordinatesEvent_8_listener($event) {\n        return ctx.checkAdjacentSquares($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rowArray);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.GridSquaresComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;IAUQA,0BAA6C;IAAAA,sCAA6F;IAAAA,iBAAK;;;;;;IAAhFA,eAAiC;IAAjCA,qEAAiC;;;;;IADlGA,0BAA6C;IAC3CA,qEAA+I;IACjJA,iBAAK;;;;IADiBA,eAAa;IAAbA,yCAAa;;;ACHzC,OAAM,MAAOC,iBAAiB;EAL9BC;IAME,UAAK,GAAG,WAAW;IAEnB,aAAQ,GAAa,EAAE;IACvB,aAAQ,GAAa,EAAE;IACvB,cAAS,GAAc,EAAE;IACzB,YAAO,GAAG,CAAC;IACX,SAAI,GAAG,EAAE;IACT,UAAK,GAAG,CAAC;;EAETC,YAAY;IACV,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,OAAO,EAAED,CAAC,EAAE,EAAE;MACrC,IAAI,CAACF,QAAQ,CAACI,IAAI,CAACF,CAAC,CAAC;;IAGvB,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,EAAEH,CAAC,EAAE,EAAE;MAClC,IAAI,CAACD,QAAQ,CAACG,IAAI,CAACF,CAAC,CAAC;;IAGvB,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,GAAG,IAAI,CAACF,OAAO,EAAED,CAAC,EAAE,EAAE;MAEjD,IAAIA,CAAC,GAAG,IAAI,CAACI,KAAK,EAAE;QAClB,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,IAAI,CAAC;OAC1B,MACI;QACH,IAAI,CAACG,SAAS,CAACH,IAAI,CAAC,KAAK,CAAC;;;IAI9B,IAAI,CAACG,SAAS,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EAChD;EAEAC,oBAAoB,CAACC,WAAsB;IACzC,IAAIC,GAAG,GAAGD,WAAW,CAAC,CAAC,CAAC;IACxB,IAAIE,CAAC,GAAGF,WAAW,CAAC,CAAC,CAAC;IAEtB,IAAIE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IAIhB,IAAIA,CAAC,GAAG,CAAC,GAAG,IAAI,CAACX,OAAO,EAAE;IAI1B,IAAIU,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;IAIlB,IAAIA,GAAG,GAAG,CAAC,GAAG,IAAI,CAACR,IAAI,EAAE;EAG3B;;AAtDWR,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP9BvB,0BAAI;MAAAA,YAAS;MAAAA,iBAAK;MAElBA,2BAAK;MAGKA;QAAA,OAASwB,kBAAc;MAAA,EAAC;MAACxB,6BAAa;MAAAA,iBAAS;MAEvDA,gCAAoC;MAEhCA,gEAEK;MACPA,iBAAQ;MAIZA,2CAAwE;MAAtDA;QAAA,OAAwBwB,gCAA4B;MAAA,EAAC;MAACxB,iBAAmB;;;MAhBvFA,eAAS;MAATA,+BAAS;MASaA,eAAa;MAAbA,sCAAa","names":["i0","GameGridComponent","constructor","setDimension","colArray","rowArray","i","columns","push","rows","bombs","bombArray","sort","Math","random","checkAdjacentSquares","coordinates","row","j","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.html","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts"],"sourcesContent":["<h3>{{title}}</h3>\n\n<div>\n  <!--<input type=\"number\" [(ngModel)]=\"rows\" />\n  <input type=\"number\" [(ngModel)]=\"columns\" />-->\n  <button (click)=\"setDimension()\">Generate grid</button>\n\n  <table id=\"minefield\" class=\"table\">\n    <tbody>\n      <tr *ngFor=\"let row of rowArray; index as i\">\n        <td *ngFor=\"let col of colArray; index as j\"><app-grid-squares [bomb]=\"bombArray[i*columns + j]\" [coordinates]=\"[j,i]\"></app-grid-squares></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<app-grid-squares (sendCoordinatesEvent)=\"checkAdjacentSquares($event)\"></app-grid-squares>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-game-grid',\n  templateUrl: './game-grid.component.html',\n  styleUrls: ['./game-grid.component.css']\n})\nexport class GameGridComponent {\n  title = 'Minefield'\n\n  colArray: number[] = [];\n  rowArray: number[] = [];\n  bombArray: boolean[] = [];\n  columns = 4;\n  rows = 10;\n  bombs = 6;\n\n  setDimension() {\n    this.colArray = [];\r\n    this.rowArray = [];\r\n\r\n    for (let i = 0; i < this.columns; i++) {\r\n      this.colArray.push(i);\r\n    }\r\n\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.rowArray.push(i);\r\n    }\r\n\r\n    for (let i = 0; i < this.rows * this.columns; i++) {\r\n\r\n      if (i < this.bombs) {\r\n        this.bombArray.push(true);\r\n      }\r\n      else {\r\n        this.bombArray.push(false);\r\n      }\r\n    }\r\n\r\n    this.bombArray.sort(() => Math.random() - 0.5);\r\n  }\n\n  checkAdjacentSquares(coordinates: number[2]) {\n    let row = coordinates[1];\r\n    let j = coordinates[0]\r\n\r\n    if (j - 1 >= 0) {\r\n\r\n    }\r\n\r\n    if (j + 1 < this.columns) {\r\n\r\n    }\r\n\r\n    if (row - 1 >= 0) {\r\n\r\n    }\r\n\r\n    if (row + 1 < this.rows) {\r\n\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}