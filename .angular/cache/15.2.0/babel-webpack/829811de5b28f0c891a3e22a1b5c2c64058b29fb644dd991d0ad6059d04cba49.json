{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"hidden\": a0,\n    \"revealed\": a1,\n    \"flagged\": a2,\n    \"detonated\": a3\n  };\n};\nexport class GridSquaresComponent {\n  constructor() {\n    this.squareClickedEvent = new EventEmitter();\n    this.squareRightClickedEvent = new EventEmitter();\n    this.value = \"Mine?\";\n  }\n  ngOnInit() {\n    this.displayValue();\n  }\n  //// Calls for update of value on property changes\n  ngOnChanges(changes) {\n    this.displayValue();\n  }\n  //// Sets value of square based on state property\n  displayValue() {\n    if (this.data.state == 'hidden') {\n      this.value = '';\n    } else if (this.data.state == 'flagged') {\n      this.value = 'bi-flag-fill';\n    } else if (this.data.mine) {\n      this.value = '';\n    } else {\n      this.value = this.data.adjacentMines == 0 ? `` : `bi-${this.data.adjacentMines}-circle-fill`;\n    }\n  }\n  //// Emits left click event\n  squareClicked() {\n    if (this.data.state == 'hidden' || this.data.state == 'flagged') {\n      this.squareClickedEvent.emit();\n    }\n  }\n  //// Emits right click event\n  squareRightClicked(event) {\n    event.preventDefault();\n    if (this.data.state == 'hidden' || this.data.state == 'flagged') {\n      this.squareRightClickedEvent.emit();\n    }\n  }\n}\nGridSquaresComponent.ɵfac = function GridSquaresComponent_Factory(t) {\n  return new (t || GridSquaresComponent)();\n};\nGridSquaresComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GridSquaresComponent,\n  selectors: [[\"app-grid-squares\"]],\n  inputs: {\n    data: \"data\"\n  },\n  outputs: {\n    squareClickedEvent: \"squareClickedEvent\",\n    squareRightClickedEvent: \"squareRightClickedEvent\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 9,\n  consts: [[1, \"gridSquare\", 3, \"ngClass\", \"click\", \"contextmenu\"]],\n  template: function GridSquaresComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GridSquaresComponent_Template_button_click_0_listener() {\n        return ctx.squareClicked();\n      })(\"contextmenu\", function GridSquaresComponent_Template_button_contextmenu_0_listener($event) {\n        return ctx.squareRightClicked($event);\n      });\n      i0.ɵɵelement(1, \"i\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(4, _c0, ctx.data.state === \"hidden\", ctx.data.state === \"revealed\", ctx.data.state === \"flagged\", ctx.data.mine === true && ctx.data.state === \"revealed\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"bi \", ctx.value, \"\");\n    }\n  },\n  dependencies: [i1.NgClass],\n  styles: [\".gridSquare[_ngcontent-%COMP%]{min-width:50px;min-height:50px;border:2px solid rgba(2,79,110,1);margin:0;padding:3px;font-weight:600;color:#05e6ff;text-shadow:-1px 0 black,0 1px black,1px 0 black,0 -1px black}.gridSquare[_ngcontent-%COMP%]:hover{border:2px dashed rgba(255,102,0,1)}.hidden[_ngcontent-%COMP%]{background-image:url(grass2.49a8aa183c8cd288.jpg);background-size:contain}.revealed[_ngcontent-%COMP%]{background:none}.detonated[_ngcontent-%COMP%]{background-image:url(landmine2.f724952045621917.jfif);background-size:contain}.flagged[_ngcontent-%COMP%]{background-image:url(grass2.49a8aa183c8cd288.jpg);background-size:contain;cursor:default;color:#ff45ff}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}