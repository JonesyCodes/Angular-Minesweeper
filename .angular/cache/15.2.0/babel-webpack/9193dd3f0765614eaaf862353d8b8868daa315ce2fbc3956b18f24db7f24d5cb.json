{"ast":null,"code":"import { ViewContainerRef, EventEmitter } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nimport { CdTimerComponent } from 'angular-cd-timer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-cd-timer\";\nconst _c0 = [\"gameTimer\"];\nconst _c1 = [\"placeholder\"];\nfunction GameStatusComponent_ng_template_22_Template(rf, ctx) {}\nexport class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.flagCount = 0;\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.gameMessage = new EventEmitter();\n  }\n  ngOnInit() {\n    const inputData = {\n      mines: this.mineCount,\n      columns: this.columnCount,\n      rows: this.rowCount,\n      flagOnClick: false\n    };\n    this.gridData = inputData;\n    this.newGame();\n    this.gameTimer.format = \"ms\";\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.data = this.gridData;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    component.instance.flagEvent.subscribe(value => this.changeFlagCount(value));\n    this.newTimer();\n    this.flagCount = 0;\n    this.gameMessage.emit('New mines buried');\n  }\n  //// Resets timer component\n  newTimer() {\n    this.gameTimer.reset();\n    this.gameTimer.start();\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    this.gameTimer.stop();\n    if (win) {\n      this.gameMessage.emit(`Congrats, you're basically Jeremy Renner! Completed in: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds}s`);\n    } else {\n      this.gameMessage.emit(`Go watch The Hurt Locker to survive longer than: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds}s`);\n    }\n  }\n  //// Increments flag counter on addition/removal of flag\n  changeFlagCount(flagAdded) {\n    if (flagAdded) {\n      this.flagCount++;\n    } else {\n      this.flagCount--;\n    }\n  }\n  //// toggle for flag on  left click ##update to check toggle rather than current value\n  toggleActive() {\n    if (this.gridData.flagOnClick) {\n      this.gridData.flagOnClick = false;\n    } else {\n      this.gridData.flagOnClick = true;\n    }\n  }\n}\nGameStatusComponent.ɵfac = function GameStatusComponent_Factory(t) {\n  return new (t || GameStatusComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector));\n};\nGameStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameStatusComponent,\n  selectors: [[\"app-game-status\"]],\n  viewQuery: function GameStatusComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, CdTimerComponent);\n      i0.ɵɵviewQuery(_c1, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.gameTimer = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  inputs: {\n    mineCount: \"mineCount\",\n    rowCount: \"rowCount\",\n    columnCount: \"columnCount\"\n  },\n  outputs: {\n    gameMessage: \"gameMessage\"\n  },\n  decls: 24,\n  vars: 2,\n  consts: [[\"id\", \"controlsDiv\", 1, \"container\"], [1, \"row\"], [1, \"col-12\", \"col-sm-8\", \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"toggleSwitch\", 1, \"form-check-input\", 3, \"change\"], [\"for\", \"flexSwitchCheckDefault\", 1, \"form-check-label\", \"text-left\"], [\"id\", \"resetDiv\", 1, \"col-12\", \"col-sm-4\"], [\"id\", \"resetGame\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-recycle\"], [\"id\", \"gameStats\"], [1, \"bi\", \"bi-flag-fill\"], [1, \"bi\", \"bi-exclamation-triangle-fill\"], [\"gameTimer\", \"\"], [\"id\", \"gameGrid\"], [\"placeholder\", \"\"]],\n  template: function GameStatusComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n      i0.ɵɵlistener(\"change\", function GameStatusComponent_Template_input_change_3_listener() {\n        return ctx.toggleActive();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Flag on default click\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function GameStatusComponent_Template_button_click_7_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(8, \"Reset\\u00A0\");\n      i0.ɵɵelement(9, \"i\", 7);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelement(13, \"i\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \"\\u00A0 \");\n      i0.ɵɵelementStart(15, \"label\");\n      i0.ɵɵtext(16);\n      i0.ɵɵelement(17, \"i\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \"\\u00A0 \");\n      i0.ɵɵelement(19, \"cd-timer\", null, 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\");\n      i0.ɵɵtemplate(22, GameStatusComponent_ng_template_22_Template, 0, 0, \"ng-template\", 12, 13, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵtextInterpolate1(\"\", ctx.flagCount, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", ctx.mineCount, \" \");\n    }\n  },\n  dependencies: [i1.CdTimerComponent],\n  styles: [\"#resetGame[_ngcontent-%COMP%]{display:flex;align-self:flex-end}#controlsDiv[_ngcontent-%COMP%]{display:flex;flex-direction:column;text-align:left}#resetDiv[_ngcontent-%COMP%]{display:flex;justify-content:end;padding:0}#gridDiv[_ngcontent-%COMP%]{width:100%;overflow-x:auto}#gameStats[_ngcontent-%COMP%]{text-align:center}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}