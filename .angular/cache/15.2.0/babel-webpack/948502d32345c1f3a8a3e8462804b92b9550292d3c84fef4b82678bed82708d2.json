{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\nclass CdTimerComponent {\n  constructor(elt, renderer) {\n    this.elt = elt;\n    this.renderer = renderer;\n    this.onStart = new EventEmitter();\n    this.onStop = new EventEmitter();\n    this.onTick = new EventEmitter();\n    this.onComplete = new EventEmitter();\n    // Initialization\n    this.autoStart = true;\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeoutId = null;\n    this.countdown = false;\n    this.format = 'default';\n  }\n  ngAfterViewInit() {\n    const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n    this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n    if (this.autoStart === undefined || this.autoStart === true) {\n      this.start();\n    }\n  }\n  ngOnDestroy() {\n    this.resetTimeout();\n  }\n  /**\n   * Start the timer\n   */\n  start() {\n    this.initVar();\n    this.resetTimeout();\n    this.computeTimeUnits();\n    this.startTickCount();\n    this.onStart.emit(this);\n  }\n  /**\n   * Resume the timer\n   */\n  resume() {\n    this.resetTimeout();\n    this.startTickCount();\n  }\n  /**\n   * Stop the timer\n   */\n  stop() {\n    this.clear();\n    this.onStop.emit(this);\n  }\n  /**\n   * Reset the timer\n   */\n  reset() {\n    this.initVar();\n    this.resetTimeout();\n    this.clear();\n    this.computeTimeUnits();\n    this.renderText();\n  }\n  /**\n   * Get the time information\n   * @returns TimeInterface\n   */\n  get() {\n    return {\n      seconds: this.seconds,\n      minutes: this.minutes,\n      hours: this.hours,\n      days: this.days,\n      timer: this.timeoutId,\n      tick_count: this.tickCounter\n    };\n  }\n  /**\n   * Initialize variable before start\n   */\n  initVar() {\n    this.startTime = this.startTime || 0;\n    this.endTime = this.endTime || 0;\n    this.countdown = this.countdown || false;\n    this.tickCounter = this.startTime;\n    // Disable countdown if start time not defined\n    if (this.countdown && this.startTime === 0) {\n      this.countdown = false;\n    }\n    // Determine auto format\n    if (!this.format) {\n      this.format = this.ngContentSchema.length > 5 ? 'user' : 'default';\n    }\n  }\n  /**\n   * Reset timeout\n   */\n  resetTimeout() {\n    if (this.timeoutId) {\n      clearInterval(this.timeoutId);\n    }\n  }\n  /**\n   * Render the time to DOM\n   */\n  renderText() {\n    let outputText;\n    if (this.format === 'user') {\n      // User presentation\n      const items = {\n        'seconds': this.seconds,\n        'minutes': this.minutes,\n        'hours': this.hours,\n        'days': this.days\n      };\n      outputText = this.ngContentSchema;\n      for (const key of Object.keys(items)) {\n        outputText = outputText.replace('[' + key + ']', items[key].toString());\n      }\n    } else if (this.format === 'intelli') {\n      // Intelli presentation\n      outputText = '';\n      if (this.days > 0) {\n        outputText += this.days.toString() + 'day' + (this.days > 1 ? 's' : '') + ' ';\n      }\n      if (this.hours > 0 || this.days > 0) {\n        outputText += this.hours.toString() + 'h ';\n      }\n      if ((this.minutes > 0 || this.hours > 0) && this.days === 0) {\n        outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n      }\n      if (this.hours === 0 && this.days === 0) {\n        outputText += this.seconds.toString().padStart(2, '0') + 's';\n      }\n    } else if (this.format === 'hms') {\n      // Hms presentation\n      outputText = this.hours.toString().padStart(2, '0') + ':';\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else if (this.format === 'ms') {\n      // ms presentation\n      outputText = '';\n      if (this.hours > 0) {\n        outputText = this.hours.toString().padStart(2, '0') + ':';\n      }\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else {\n      // Default presentation\n      outputText = this.days.toString() + 'd ';\n      outputText += this.hours.toString() + 'h ';\n      outputText += this.minutes.toString() + 'm ';\n      outputText += this.seconds.toString() + 's';\n    }\n    this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n  }\n  clear() {\n    this.resetTimeout();\n    this.timeoutId = null;\n  }\n  /**\n   * Compute each unit (seconds, minutes, hours, days) for further manipulation\n   * @protected\n   */\n  computeTimeUnits() {\n    if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600 % 24);\n      this.days = Math.floor(this.tickCounter / 3600 / 24);\n    } else if (this.maxTimeUnit === 'second') {\n      this.seconds = this.tickCounter;\n      this.minutes = 0;\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'minute') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60);\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'hour') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600);\n      this.days = 0;\n    }\n    this.renderText();\n  }\n  /**\n   * Start tick count, base of this component\n   * @protected\n   */\n  startTickCount() {\n    const that = this;\n    that.timeoutId = setInterval(function () {\n      let counter;\n      if (that.countdown) {\n        // Compute finish counter for countdown\n        counter = that.tickCounter;\n        if (that.startTime > that.endTime) {\n          counter = that.tickCounter - that.endTime - 1;\n        }\n      } else {\n        // Compute finish counter for timer\n        counter = that.tickCounter - that.startTime;\n        if (that.endTime > that.startTime) {\n          counter = that.endTime - that.tickCounter - 1;\n        }\n      }\n      that.computeTimeUnits();\n      const timer = {\n        seconds: that.seconds,\n        minutes: that.minutes,\n        hours: that.hours,\n        days: that.days,\n        timer: that.timeoutId,\n        tick_count: that.tickCounter\n      };\n      that.onTick.emit(timer);\n      if (counter < 0) {\n        that.stop();\n        that.onComplete.emit(that);\n        return;\n      }\n      if (that.countdown) {\n        that.tickCounter--;\n      } else {\n        that.tickCounter++;\n      }\n    }, 1000); // Each seconds\n  }\n}\n\nCdTimerComponent.ɵfac = function CdTimerComponent_Factory(t) {\n  return new (t || CdTimerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nCdTimerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdTimerComponent,\n  selectors: [[\"cd-timer\"]],\n  inputs: {\n    startTime: \"startTime\",\n    endTime: \"endTime\",\n    countdown: \"countdown\",\n    autoStart: \"autoStart\",\n    maxTimeUnit: \"maxTimeUnit\",\n    format: \"format\"\n  },\n  outputs: {\n    onStart: \"onStart\",\n    onStop: \"onStop\",\n    onTick: \"onTick\",\n    onComplete: \"onComplete\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CdTimerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdTimerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cd-timer',\n      template: ' <ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    startTime: [{\n      type: Input\n    }],\n    endTime: [{\n      type: Input\n    }],\n    countdown: [{\n      type: Input\n    }],\n    autoStart: [{\n      type: Input\n    }],\n    maxTimeUnit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    onStart: [{\n      type: Output\n    }],\n    onStop: [{\n      type: Output\n    }],\n    onTick: [{\n      type: Output\n    }],\n    onComplete: [{\n      type: Output\n    }]\n  });\n})();\nclass CdTimerModule {}\nCdTimerModule.ɵfac = function CdTimerModule_Factory(t) {\n  return new (t || CdTimerModule)();\n};\nCdTimerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdTimerModule\n});\nCdTimerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdTimerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdTimerComponent],\n      imports: [],\n      exports: [CdTimerComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","NgModule","CdTimerComponent","constructor","elt","renderer","onStart","onStop","onTick","onComplete","autoStart","startTime","endTime","timeoutId","countdown","format","ngAfterViewInit","ngContentNode","nativeElement","lastChild","ngContentSchema","nodeValue","undefined","start","ngOnDestroy","resetTimeout","initVar","computeTimeUnits","startTickCount","emit","resume","stop","clear","reset","renderText","get","seconds","minutes","hours","days","timer","tick_count","tickCounter","length","clearInterval","outputText","items","key","Object","keys","replace","toString","padStart","setProperty","maxTimeUnit","Math","floor","that","setInterval","counter","ɵfac","ElementRef","Renderer2","ɵcmp","type","args","selector","template","CdTimerModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["C:/Users/ReactTraining/gitcode/angular/Angular-Minesweeper/node_modules/angular-cd-timer/fesm2020/angular-cd-timer.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\n\nclass CdTimerComponent {\n    constructor(elt, renderer) {\n        this.elt = elt;\n        this.renderer = renderer;\n        this.onStart = new EventEmitter();\n        this.onStop = new EventEmitter();\n        this.onTick = new EventEmitter();\n        this.onComplete = new EventEmitter();\n        // Initialization\n        this.autoStart = true;\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeoutId = null;\n        this.countdown = false;\n        this.format = 'default';\n    }\n    ngAfterViewInit() {\n        const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n        this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n        if (this.autoStart === undefined || this.autoStart === true) {\n            this.start();\n        }\n    }\n    ngOnDestroy() {\n        this.resetTimeout();\n    }\n    /**\n     * Start the timer\n     */\n    start() {\n        this.initVar();\n        this.resetTimeout();\n        this.computeTimeUnits();\n        this.startTickCount();\n        this.onStart.emit(this);\n    }\n    /**\n     * Resume the timer\n     */\n    resume() {\n        this.resetTimeout();\n        this.startTickCount();\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        this.clear();\n        this.onStop.emit(this);\n    }\n    /**\n     * Reset the timer\n     */\n    reset() {\n        this.initVar();\n        this.resetTimeout();\n        this.clear();\n        this.computeTimeUnits();\n        this.renderText();\n    }\n    /**\n     * Get the time information\n     * @returns TimeInterface\n     */\n    get() {\n        return {\n            seconds: this.seconds,\n            minutes: this.minutes,\n            hours: this.hours,\n            days: this.days,\n            timer: this.timeoutId,\n            tick_count: this.tickCounter\n        };\n    }\n    /**\n     * Initialize variable before start\n     */\n    initVar() {\n        this.startTime = this.startTime || 0;\n        this.endTime = this.endTime || 0;\n        this.countdown = this.countdown || false;\n        this.tickCounter = this.startTime;\n        // Disable countdown if start time not defined\n        if (this.countdown && this.startTime === 0) {\n            this.countdown = false;\n        }\n        // Determine auto format\n        if (!this.format) {\n            this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';\n        }\n    }\n    /**\n     * Reset timeout\n     */\n    resetTimeout() {\n        if (this.timeoutId) {\n            clearInterval(this.timeoutId);\n        }\n    }\n    /**\n     * Render the time to DOM\n     */\n    renderText() {\n        let outputText;\n        if (this.format === 'user') {\n            // User presentation\n            const items = {\n                'seconds': this.seconds,\n                'minutes': this.minutes,\n                'hours': this.hours,\n                'days': this.days\n            };\n            outputText = this.ngContentSchema;\n            for (const key of Object.keys(items)) {\n                outputText = outputText.replace('[' + key + ']', items[key].toString());\n            }\n        }\n        else if (this.format === 'intelli') {\n            // Intelli presentation\n            outputText = '';\n            if (this.days > 0) {\n                outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';\n            }\n            if ((this.hours > 0) || (this.days > 0)) {\n                outputText += this.hours.toString() + 'h ';\n            }\n            if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {\n                outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n            }\n            if ((this.hours === 0) && (this.days === 0)) {\n                outputText += this.seconds.toString().padStart(2, '0') + 's';\n            }\n        }\n        else if (this.format === 'hms') {\n            // Hms presentation\n            outputText = this.hours.toString().padStart(2, '0') + ':';\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else if (this.format === 'ms') {\n            // ms presentation\n            outputText = '';\n            if (this.hours > 0) {\n                outputText = this.hours.toString().padStart(2, '0') + ':';\n            }\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else {\n            // Default presentation\n            outputText = this.days.toString() + 'd ';\n            outputText += this.hours.toString() + 'h ';\n            outputText += this.minutes.toString() + 'm ';\n            outputText += this.seconds.toString() + 's';\n        }\n        this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n    }\n    clear() {\n        this.resetTimeout();\n        this.timeoutId = null;\n    }\n    /**\n     * Compute each unit (seconds, minutes, hours, days) for further manipulation\n     * @protected\n     */\n    computeTimeUnits() {\n        if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor((this.tickCounter / 3600) % 24);\n            this.days = Math.floor((this.tickCounter / 3600) / 24);\n        }\n        else if (this.maxTimeUnit === 'second') {\n            this.seconds = this.tickCounter;\n            this.minutes = 0;\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'minute') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor(this.tickCounter / 60);\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'hour') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor(this.tickCounter / 3600);\n            this.days = 0;\n        }\n        this.renderText();\n    }\n    /**\n     * Start tick count, base of this component\n     * @protected\n     */\n    startTickCount() {\n        const that = this;\n        that.timeoutId = setInterval(function () {\n            let counter;\n            if (that.countdown) {\n                // Compute finish counter for countdown\n                counter = that.tickCounter;\n                if (that.startTime > that.endTime) {\n                    counter = that.tickCounter - that.endTime - 1;\n                }\n            }\n            else {\n                // Compute finish counter for timer\n                counter = that.tickCounter - that.startTime;\n                if (that.endTime > that.startTime) {\n                    counter = that.endTime - that.tickCounter - 1;\n                }\n            }\n            that.computeTimeUnits();\n            const timer = {\n                seconds: that.seconds,\n                minutes: that.minutes,\n                hours: that.hours,\n                days: that.days,\n                timer: that.timeoutId,\n                tick_count: that.tickCounter\n            };\n            that.onTick.emit(timer);\n            if (counter < 0) {\n                that.stop();\n                that.onComplete.emit(that);\n                return;\n            }\n            if (that.countdown) {\n                that.tickCounter--;\n            }\n            else {\n                that.tickCounter++;\n            }\n        }, 1000); // Each seconds\n    }\n}\nCdTimerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nCdTimerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.3\", type: CdTimerComponent, selector: \"cd-timer\", inputs: { startTime: \"startTime\", endTime: \"endTime\", countdown: \"countdown\", autoStart: \"autoStart\", maxTimeUnit: \"maxTimeUnit\", format: \"format\" }, outputs: { onStart: \"onStart\", onStop: \"onStop\", onTick: \"onTick\", onComplete: \"onComplete\" }, ngImport: i0, template: ' <ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cd-timer',\n                    template: ' <ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { startTime: [{\n                type: Input\n            }], endTime: [{\n                type: Input\n            }], countdown: [{\n                type: Input\n            }], autoStart: [{\n                type: Input\n            }], maxTimeUnit: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], onStart: [{\n                type: Output\n            }], onStop: [{\n                type: Output\n            }], onTick: [{\n                type: Output\n            }], onComplete: [{\n                type: Output\n            }] } });\n\nclass CdTimerModule {\n}\nCdTimerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdTimerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, declarations: [CdTimerComponent], exports: [CdTimerComponent] });\nCdTimerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdTimerComponent],\n                    imports: [],\n                    exports: [CdTimerComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}