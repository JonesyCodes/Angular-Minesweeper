{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-squares/grid-squares.component\";\nfunction GameGridComponent_app_grid_squares_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-grid-squares\", 2);\n    i0.ɵɵlistener(\"squareClicked\", function GameGridComponent_app_grid_squares_6_Template_app_grid_squares_squareClicked_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const idx_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.squareClicked(idx_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"data\", s_r1);\n  }\n}\nexport class GameGridComponent {\n  constructor() {\n    this.title = 'Minefield';\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    this.columns = 4;\n    this.rows = 10;\n    this.mines = 6;\n  }\n  ngOnInit() {}\n  //// Generate grid and randomise bomb locations\n  setDimension() {\n    this.colArray = [];\n    this.rowArray = [];\n    this.squares = [];\n    for (let i = 0; i < this.columns; i++) {\n      this.colArray.push(i);\n    }\n    for (let i = 0; i < this.rows; i++) {\n      this.rowArray.push(i);\n    }\n    for (let i = 0; i < this.rows * this.columns; i++) {\n      if (i < this.mines) {\n        const squareData = {\n          mine: true,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      } else {\n        const squareData = {\n          mine: false,\n          state: 'hidden'\n        };\n        this.squares.push(squareData);\n      }\n    }\n    this.squares.sort(() => Math.random() - 0.5);\n  }\n  //// Event emitted from square, use coordinates to select adjacent squares\n  squareClicked(index) {\n    const square = this.squares[index];\n    square.state = 'revealed';\n  }\n}\nGameGridComponent.ɵfac = function GameGridComponent_Factory(t) {\n  return new (t || GameGridComponent)();\n};\nGameGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameGridComponent,\n  selectors: [[\"app-game-grid\"]],\n  decls: 7,\n  vars: 2,\n  consts: [[3, \"click\"], [3, \"data\", \"squareClicked\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\", \"squareClicked\"]],\n  template: function GameGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GameGridComponent_Template_button_click_3_listener() {\n        return ctx.setDimension();\n      });\n      i0.ɵɵtext(4, \"Generate grid\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\");\n      i0.ɵɵtemplate(6, GameGridComponent_app_grid_squares_6_Template, 1, 1, \"app-grid-squares\", 1);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.squares);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.GridSquaresComponent],\n  styles: [\".grid[_ngcontent-%COMP%] {\\r\\n  display: grid;\\r\\n  grid-template-columns: repeat(5, 150px);\\r\\n  justify-content: center;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1ncmlkL2dhbWUtZ3JpZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVDQUF1QztFQUN2Qyx1QkFBdUI7QUFDekIiLCJzb3VyY2VzQ29udGVudCI6WyIuZ3JpZCB7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxNTBweCk7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAeIA,2CAA2G;IAArCA;MAAA;MAAA;MAAA;MAAA,OAAiBA,2CAAkB;IAAA,EAAC;IAACA,iBAAmB;;;;IAAnEA,2BAAU;;;ACNzE,OAAM,MAAOC,iBAAiB;EAL9BC;IAME,UAAK,GAAG,WAAW;IAEnB,aAAQ,GAAa,EAAE;IACvB,aAAQ,GAAa,EAAE;IACvB,YAAO,GAAiB,EAAE;IAC1B,YAAO,GAAG,CAAC;IACX,SAAI,GAAG,EAAE;IACT,UAAK,GAAG,CAAC;;EAETC,QAAQ,IAER;EAEA;EACAC,YAAY;IACV,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,OAAO,GAAG,EAAE;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,OAAO,EAAED,CAAC,EAAE,EAAE;MACrC,IAAI,CAACH,QAAQ,CAACK,IAAI,CAACF,CAAC,CAAC;;IAGvB,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,EAAEH,CAAC,EAAE,EAAE;MAClC,IAAI,CAACF,QAAQ,CAACI,IAAI,CAACF,CAAC,CAAC;;IAGvB,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACG,IAAI,GAAG,IAAI,CAACF,OAAO,EAAED,CAAC,EAAE,EAAE;MAEjD,IAAIA,CAAC,GAAG,IAAI,CAACI,KAAK,EAAE;QAClB,MAAMC,UAAU,GAAe;UAC7BC,IAAI,EAAE,IAAI;UACVC,KAAK,EAAE;SACR;QAED,IAAI,CAACR,OAAO,CAACG,IAAI,CAACG,UAAU,CAAC;OAC9B,MACI;QACH,MAAMA,UAAU,GAAe;UAC7BC,IAAI,EAAE,KAAK;UACXC,KAAK,EAAE;SACR;QACD,IAAI,CAACR,OAAO,CAACG,IAAI,CAACG,UAAU,CAAC;;;IAIjC,IAAI,CAACN,OAAO,CAACS,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EAE9C;EAEA;EACAC,aAAa,CAACC,KAAa;IACzB,MAAMC,MAAM,GAAG,IAAI,CAACd,OAAO,CAACa,KAAK,CAAC;IAElCC,MAAM,CAACN,KAAK,GAAG,UAAU;EAC3B;;AAxDWd,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT9B1B,0BAAI;MAAAA,YAAS;MAAAA,iBAAK;MAElBA,2BAAK;MAGKA;QAAA,OAAS2B,kBAAc;MAAA,EAAC;MAAC3B,6BAAa;MAAAA,iBAAS;MASvDA,2BAAK;MACHA,4FAA8H;MAChIA,iBAAM;;;MAhBJA,eAAS;MAATA,+BAAS;MAeuBA,eAAY;MAAZA,qCAAY","names":["i0","GameGridComponent","constructor","ngOnInit","setDimension","colArray","rowArray","squares","i","columns","push","rows","mines","squareData","mine","state","sort","Math","random","squareClicked","index","square","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.html","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-grid\\game-grid.component.ts"],"sourcesContent":["<h3>{{title}}</h3>\n\n<div>\n  <!--<input type=\"number\" [(ngModel)]=\"rows\" />\n  <input type=\"number\" [(ngModel)]=\"columns\" />-->\n  <button (click)=\"setDimension()\">Generate grid</button>\n\n  <!--<table id=\"minefield\" class=\"table\">\n    <tbody>\n      <tr *ngFor=\"let row of rowArray; index as i\">\n        <td *ngFor=\"let col of colArray; index as j\"><app-grid-squares [id]=\"i*columns + j\" [mine]=\"squares[i*columns + j]\" (sendCoordinatesEvent)=\"checkAdjacentSquares($event)\"></app-grid-squares></td>\n      </tr>\n    </tbody>\n  </table>-->\n  <div>\n    <app-grid-squares *ngFor=\"let s of squares; let idx=index\" [data]=\"s\" (squareClicked)=\"squareClicked(idx)\"></app-grid-squares>\n  </div>\n\n</div>\n","import { Component, ViewChild, ElementRef, ComponentRef, AfterViewInit } from '@angular/core';\r\nimport { GridSquaresComponent } from '../grid-squares/grid-squares.component';\r\nimport { SquareData } from '../square-data';\r\n\r\n@Component({\r\n  selector: 'app-game-grid',\r\n  templateUrl: './game-grid.component.html',\r\n  styleUrls: ['./game-grid.component.css']\r\n})\r\nexport class GameGridComponent {\r\n  title = 'Minefield'\r\n\r\n  colArray: number[] = [];\r\n  rowArray: number[] = [];\r\n  squares: SquareData[] = [];\r\n  columns = 4;\r\n  rows = 10;\r\n  mines = 6;\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  //// Generate grid and randomise bomb locations\r\n  setDimension() {\r\n    this.colArray = [];\r\n    this.rowArray = [];\r\n    this.squares = [];\r\n\r\n    for (let i = 0; i < this.columns; i++) {\r\n      this.colArray.push(i);\r\n    }\r\n\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.rowArray.push(i);\r\n    }\r\n\r\n    for (let i = 0; i < this.rows * this.columns; i++) {\r\n\r\n      if (i < this.mines) {\r\n        const squareData: SquareData = {\r\n          mine: true,\r\n          state: 'hidden'\r\n        };\r\n\r\n        this.squares.push(squareData);\r\n      }\r\n      else {\r\n        const squareData: SquareData = {\r\n          mine: false,\r\n          state: 'hidden'\r\n        };\r\n        this.squares.push(squareData);\r\n      }\r\n    }\r\n\r\n    this.squares.sort(() => Math.random() - 0.5);\r\n\r\n  }\r\n\r\n  //// Event emitted from square, use coordinates to select adjacent squares\r\n  squareClicked(index: number) {\r\n    const square = this.squares[index];\r\n\r\n    square.state = 'revealed';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}