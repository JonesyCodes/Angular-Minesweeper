{"ast":null,"code":"import { ViewContainerRef } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"placeholder\"];\nfunction GameStatusComponent_ng_template_19_Template(rf, ctx) {}\nexport class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.renderGrid = 1;\n  }\n  ngOnInit() {\n    this.newGame();\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.mines = this.mineCount;\n    component.instance.columns = this.columnCount;\n    component.instance.rows = this.rowCount;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    let element = document.getElementById('gameMessage');\n    element.innerHTML = '';\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    let element = document.getElementById('gameMessage');\n    if (win) {\n      let newElement = '<h2>Winner<h2>';\n      element.innerHTML = newElement;\n    } else {\n      let newElement = '<h2>Go watch The Hurt Locker<h2>';\n      element.innerHTML = newElement;\n    }\n  }\n  mineInputChange(event) {\n    this.mineCount = event.target.value;\n  }\n  rowInputChange(event) {\n    this.rowCount = event.target.value;\n  }\n  columnInputChange(event) {\n    this.columnCount = event.target.value;\n  }\n}\nGameStatusComponent.ɵfac = function GameStatusComponent_Factory(t) {\n  return new (t || GameStatusComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector));\n};\nGameStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameStatusComponent,\n  selectors: [[\"app-game-status\"]],\n  viewQuery: function GameStatusComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  decls: 21,\n  vars: 4,\n  consts: [[\"for\", \"mineCount\"], [\"id\", \"mineCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"0\", 3, \"value\", \"change\"], [\"mineAmount\", \"\"], [\"for\", \"columnCount\"], [\"id\", \"columnCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"0\", 3, \"value\", \"change\"], [\"for\", \"rowCount\"], [\"id\", \"rowCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"0\", 3, \"value\", \"change\"], [\"minAomount\", \"\"], [3, \"click\"], [\"id\", \"gameMessage\"], [\"id\", \"gameGrid\"], [\"placeholder\", \"\"]],\n  template: function GameStatusComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"label\", 0);\n      i0.ɵɵtext(3, \"Mines: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 1, 2);\n      i0.ɵɵlistener(\"change\", function GameStatusComponent_Template_input_change_4_listener($event) {\n        return ctx.mineInputChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"label\", 3);\n      i0.ɵɵtext(7, \"Columns: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 4, 2);\n      i0.ɵɵlistener(\"change\", function GameStatusComponent_Template_input_change_8_listener($event) {\n        return ctx.columnInputChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\", 5);\n      i0.ɵɵtext(11, \"Rows: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 6, 7);\n      i0.ɵɵlistener(\"change\", function GameStatusComponent_Template_input_change_12_listener($event) {\n        return ctx.rowInputChange($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"label\");\n      i0.ɵɵtext(15, \"Time Spent: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function GameStatusComponent_Template_button_click_16_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(17, \"Reset\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"div\", 9);\n      i0.ɵɵtemplate(19, GameStatusComponent_ng_template_19_Template, 0, 0, \"ng-template\", 10, 11, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(3);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.mineCount);\n      i0.ɵɵadvance(4);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.columnCount);\n      i0.ɵɵadvance(4);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.rowCount);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ViewContainerRef","GameGridComponent","GameStatusComponent","constructor","resolver","injector","ngOnInit","newGame","placeholder","detach","componentFactory","resolveComponentFactory","component","create","insert","hostView","instance","mines","mineCount","columns","columnCount","rows","rowCount","gameOverEvent","subscribe","value","gameOver","element","document","getElementById","innerHTML","win","newElement","mineInputChange","event","target","rowInputChange","columnInputChange","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.html"],"sourcesContent":["import { Component, ViewContainerRef, ComponentRef, ViewChild, QueryList, ComponentFactoryResolver, Injector, ComponentFactory } from '@angular/core';\r\nimport { GameGridComponent } from '../game-grid/game-grid.component';\r\n\r\n@Component({\r\n  selector: 'app-game-status',\r\n  templateUrl: './game-status.component.html',\r\n  styleUrls: ['./game-status.component.css']\r\n})\r\nexport class GameStatusComponent {\r\n  title = 'Status Bar'\r\n  mineCount: number = 3;\r\n  rowCount: number = 5;\r\n  columnCount: number = 5;\r\n  renderGrid: number = 1;\r\n\r\n  @ViewChild('placeholder', { read: ViewContainerRef, static: true })\r\n  public placeholder!: ViewContainerRef;\r\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {}\r\n\r\n  ngOnInit() {\r\n    this.newGame();\r\n  }\r\n\r\n  //// Generate new minefield and clear game message\r\n  newGame() {\r\n    this.placeholder.detach();\r\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\r\n    const component = componentFactory.create(this.injector);\r\n    this.placeholder.insert(component.hostView);\r\n\r\n    component.instance.mines = this.mineCount;\r\n\r\n    component.instance.columns = this.columnCount;\r\n    component.instance.rows = this.rowCount;\r\n\r\n    component.instance.gameOverEvent.subscribe((value) => this.gameOver(value));\r\n\r\n    let element = document.getElementById('gameMessage');\r\n    element!.innerHTML = '';\r\n  }\r\n\r\n  //// Create game message based on game result\r\n  gameOver(win: boolean) {\r\n    let element = document.getElementById('gameMessage');\r\n\r\n    if (win) {      \r\n      let newElement = '<h2>Winner<h2>';\r\n      element!.innerHTML = newElement;\r\n    }\r\n    else {\r\n      let newElement = '<h2>Go watch The Hurt Locker<h2>';\r\n      element!.innerHTML = newElement;\r\n    }\r\n  }\r\n\r\n  mineInputChange(event: { target: { value: number; }; }) {\r\n    this.mineCount = event.target.value;\r\n  }\r\n\r\n  rowInputChange(event: { target: { value: number; }; }) {\r\n    this.rowCount = event.target.value;\r\n  }\r\n\r\n  columnInputChange(event: { target: { value: number; }; }) {\r\n    this.columnCount = event.target.value;\r\n  }\r\n}\r\n","<h3>{{title}}</h3>\r\n\r\n<label for=\"mineCount\">Mines: </label>\r\n<input #mineAmount id=\"mineCount\" type=\"number\" required value=\"{{mineCount}}\" min=\"0\" (change)=\"mineInputChange($any($event))\" />\r\n\r\n<label for=\"columnCount\">Columns: </label>\r\n<input #mineAmount id=\"columnCount\" type=\"number\" required value=\"{{columnCount}}\" min=\"0\" (change)=\"columnInputChange($any($event))\" />\r\n\r\n<label for=\"rowCount\">Rows: </label>\r\n<input #minAomount id=\"rowCount\" type=\"number\" required value=\"{{rowCount}}\" min=\"0\" (change)=\"rowInputChange($any($event))\" />\r\n\r\n<label>Time Spent: </label>\r\n<button (click)=\"newGame()\">Reset</button>\r\n\r\n<div id=\"gameMessage\"></div>\r\n\r\n<ng-template #placeholder id=\"gameGrid\"></ng-template>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}