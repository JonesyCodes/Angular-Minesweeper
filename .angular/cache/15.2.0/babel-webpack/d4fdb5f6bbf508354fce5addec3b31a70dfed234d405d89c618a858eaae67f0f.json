{"ast":null,"code":"import { ViewContainerRef, EventEmitter } from '@angular/core';\nimport { GameGridComponent } from '../game-grid/game-grid.component';\nimport { CdTimerComponent } from 'angular-cd-timer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-cd-timer\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"gameTimer\"];\nconst _c1 = [\"placeholder\"];\nfunction GameStatusComponent_ng_template_22_Template(rf, ctx) {}\nexport class GameStatusComponent {\n  constructor(resolver, injector) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.title = 'Status Bar';\n    this.flagCount = 0;\n    this.mineCount = 3;\n    this.rowCount = 5;\n    this.columnCount = 5;\n    this.toggleClickChecked = false;\n    this.gameMessage = new EventEmitter();\n  }\n  ngOnInit() {\n    this.newGame();\n    this.gameTimer.format = \"ms\";\n  }\n  //// Generate new minefield and clear game message\n  newGame() {\n    this.placeholder.detach();\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\n    const component = componentFactory.create(this.injector);\n    this.placeholder.insert(component.hostView);\n    component.instance.mines = this.mineCount;\n    component.instance.columns = this.columnCount;\n    component.instance.rows = this.rowCount;\n    component.instance.flagOnClick = this.toggleClickChecked;\n    component.instance.gameOverEvent.subscribe(value => this.gameOver(value));\n    component.instance.flagEvent.subscribe(value => this.changeFlagCount(value));\n    this.newTimer();\n    this.flagCount = 0;\n    this.gameMessage.emit('New mines buried');\n  }\n  //// Resets timer component\n  newTimer() {\n    this.gameTimer.reset();\n    this.gameTimer.start();\n  }\n  //// Create game message based on game result\n  gameOver(win) {\n    this.gameTimer.stop();\n    if (win) {\n      this.gameMessage.emit(`Congrats, you're basically Jeremy Renner! Completed in: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds}s`);\n    } else {\n      this.gameMessage.emit(`Go watch The Hurt Locker to survive longer than: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds}s`);\n    }\n  }\n  //// Increments flag counter on addition/removal of flag\n  changeFlagCount(flagAdded) {\n    if (flagAdded) {\n      this.flagCount++;\n    } else {\n      this.flagCount--;\n    }\n  }\n}\nGameStatusComponent.ɵfac = function GameStatusComponent_Factory(t) {\n  return new (t || GameStatusComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.Injector));\n};\nGameStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GameStatusComponent,\n  selectors: [[\"app-game-status\"]],\n  viewQuery: function GameStatusComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, CdTimerComponent);\n      i0.ɵɵviewQuery(_c1, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.gameTimer = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n    }\n  },\n  inputs: {\n    mineCount: \"mineCount\",\n    rowCount: \"rowCount\",\n    columnCount: \"columnCount\",\n    toggleClickChecked: \"toggleClickChecked\"\n  },\n  outputs: {\n    gameMessage: \"gameMessage\"\n  },\n  decls: 24,\n  vars: 3,\n  consts: [[\"id\", \"controlsDiv\", 1, \"container\"], [1, \"row\"], [1, \"col-12\", \"col-sm-8\", \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"toggleSwitch\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"flexSwitchCheckDefault\", 1, \"form-check-label\", \"text-left\"], [\"id\", \"resetDiv\", 1, \"col-12\", \"col-sm-4\"], [\"id\", \"resetGame\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"bi\", \"bi-recycle\"], [\"id\", \"gameStats\"], [1, \"bi\", \"bi-flag-fill\"], [1, \"bi\", \"bi-exclamation-triangle-fill\"], [\"gameTimer\", \"\"], [\"id\", \"gameGrid\"], [\"placeholder\", \"\"]],\n  template: function GameStatusComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function GameStatusComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.toggleClickChecked = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Flag on default click\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function GameStatusComponent_Template_button_click_7_listener() {\n        return ctx.newGame();\n      });\n      i0.ɵɵtext(8, \"Reset\\u00A0\");\n      i0.ɵɵelement(9, \"i\", 7);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelement(13, \"i\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \"\\u00A0 \");\n      i0.ɵɵelementStart(15, \"label\");\n      i0.ɵɵtext(16);\n      i0.ɵɵelement(17, \"i\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \"\\u00A0 \");\n      i0.ɵɵelement(19, \"cd-timer\", null, 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\");\n      i0.ɵɵtemplate(22, GameStatusComponent_ng_template_22_Template, 0, 0, \"ng-template\", 12, 13, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.toggleClickChecked);\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate1(\"\", ctx.flagCount, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", ctx.mineCount, \" \");\n    }\n  },\n  dependencies: [i1.CdTimerComponent, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"#resetGame[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-self: flex-end;\\r\\n}\\r\\n\\r\\n#controlsDiv[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n#resetDiv[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: end;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n#gridDiv[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  overflow-x: auto;\\r\\n}\\r\\n\\r\\n#gameStats[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zdGF0dXMvZ2FtZS1zdGF0dXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixvQkFBb0I7RUFDcEIsVUFBVTtBQUNaOztBQUVBO0VBQ0UsV0FBVztFQUNYLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbIiNyZXNldEdhbWUge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XHJcbn1cclxuXHJcbiNjb250cm9sc0RpdiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbn1cclxuXHJcbiNyZXNldERpdiB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcclxuICBwYWRkaW5nOiAwO1xyXG59XHJcblxyXG4jZ3JpZERpdiB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgb3ZlcmZsb3cteDogYXV0bztcclxufVxyXG5cclxuI2dhbWVTdGF0cyB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["ViewContainerRef","EventEmitter","GameGridComponent","CdTimerComponent","GameStatusComponent","constructor","resolver","injector","ngOnInit","newGame","gameTimer","format","placeholder","detach","componentFactory","resolveComponentFactory","component","create","insert","hostView","instance","mines","mineCount","columns","columnCount","rows","rowCount","flagOnClick","toggleClickChecked","gameOverEvent","subscribe","value","gameOver","flagEvent","changeFlagCount","newTimer","flagCount","gameMessage","emit","reset","start","win","stop","get","minutes","seconds","flagAdded","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.ts","C:\\Users\\ReactTraining\\Workspaces\\P082 - Angular\\Minesweeper\\src\\app\\game-status\\game-status.component.html"],"sourcesContent":["import { Component, ViewContainerRef, ViewChild, ComponentFactoryResolver, Injector, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GameGridComponent } from '../game-grid/game-grid.component';\r\nimport { CdTimerComponent } from 'angular-cd-timer';\r\n\r\n@Component({\r\n  selector: 'app-game-status',\r\n  templateUrl: './game-status.component.html',\r\n  styleUrls: ['./game-status.component.css']\r\n})\r\nexport class GameStatusComponent {\r\n  title = 'Status Bar'\r\n  flagCount = 0;\r\n\r\n  @Input() mineCount: number = 3;\r\n  @Input() rowCount: number = 5;\r\n  @Input() columnCount: number = 5;\r\n  @Input() toggleClickChecked: boolean = false;\r\n\r\n  @Output() gameMessage: EventEmitter<string> = new EventEmitter();\r\n\r\n  @ViewChild('gameTimer', { read: CdTimerComponent, static: true })\r\n  public gameTimer!: CdTimerComponent;\r\n\r\n  @ViewChild('placeholder', { read: ViewContainerRef, static: true })\r\n  public placeholder!: ViewContainerRef;\r\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {}\r\n\r\n  ngOnInit() {\r\n    this.newGame();\r\n    this.gameTimer.format = \"ms\";\r\n  }\r\n\r\n  //// Generate new minefield and clear game message\r\n  newGame() {\r\n    this.placeholder.detach();\r\n    const componentFactory = this.resolver.resolveComponentFactory(GameGridComponent);\r\n    const component = componentFactory.create(this.injector);\r\n    this.placeholder.insert(component.hostView);\r\n\r\n    component.instance.mines = this.mineCount;\r\n    component.instance.columns = this.columnCount;\r\n    component.instance.rows = this.rowCount;\r\n    component.instance.flagOnClick = this.toggleClickChecked;\r\n\r\n    component.instance.gameOverEvent.subscribe((value) => this.gameOver(value));\r\n    component.instance.flagEvent.subscribe((value) => this.changeFlagCount(value));\r\n\r\n    this.newTimer();\r\n    this.flagCount = 0;\r\n    this.gameMessage.emit('New mines buried');\r\n  }\r\n\r\n  //// Resets timer component\r\n  newTimer() {\r\n    this.gameTimer.reset();\r\n    this.gameTimer.start();\r\n  }\r\n\r\n  //// Create game message based on game result\r\n  gameOver(win: boolean) {\r\n    this.gameTimer.stop();\r\n\r\n    if (win) {      \r\n      this.gameMessage.emit(`Congrats, you're basically Jeremy Renner! Completed in: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds }s`);\r\n    }\r\n    else {\r\n      this.gameMessage.emit(`Go watch The Hurt Locker to survive longer than: ${this.gameTimer.get().minutes}min ${this.gameTimer.get().seconds }s`);\r\n    }\r\n  }\r\n\r\n  //// Increments flag counter on addition/removal of flag\r\n  changeFlagCount(flagAdded: boolean) {\r\n    if (flagAdded) {\r\n      this.flagCount++;\r\n    }\r\n    else {\r\n      this.flagCount--;\r\n    }\r\n  }\r\n\r\n  //toggleActive(event: Event) {\r\n  //  if (event.target!.checked) {\r\n  //    console.log(true);\r\n  //  }\r\n  //  else {\r\n  //    console.log(false);\r\n  //  }\r\n  //}\r\n}\r\n","\r\n<div id=\"controlsDiv\" class=\"container\">\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-12 col-sm-8 form-check form-switch\">\r\n      <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"toggleSwitch\" [(ngModel)]=\"toggleClickChecked\" />\r\n      <label class=\"form-check-label text-left\" for=\"flexSwitchCheckDefault\">Flag on default click</label>\r\n    </div>\r\n    <div id=\"resetDiv\" class=\"col-12 col-sm-4\">\r\n      <button id=\"resetGame\" class=\"btn btn-secondary\" (click)=\"newGame()\">Reset&nbsp;<i class=\"bi bi-recycle\"></i></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div id=\"gameStats\">\r\n  <label>{{flagCount}} <i class=\"bi bi-flag-fill\"></i></label>&nbsp;\r\n  <label>{{mineCount}} <i class=\"bi bi-exclamation-triangle-fill\"></i></label>&nbsp;\r\n  <cd-timer #gameTimer></cd-timer>\r\n</div>\r\n\r\n<div>\r\n  <ng-template #placeholder id=\"gameGrid\"></ng-template>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}