{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class OptionsComponent {\n  constructor() {\n    this.title = 'Game Options';\n    this.data = {\n      mineCount: 1,\n      columnCount: 1,\n      rowCount: 1\n    };\n    this.optionsChangedEvent = new EventEmitter();\n  }\n  //// Updates mineCount property on input change\n  mineInputChange(event) {\n    if (event.target.value < 1) {\n      event.target.value = 1;\n    }\n    this.data.mineCount = Number(event.target.value);\n    this.checkParameters();\n  }\n  //// Updates rowCount property on input change\n  rowInputChange(event) {\n    if (event.target.value < 1) {\n      event.target.value = 1;\n    }\n    this.data.rowCount = Number(event.target.value);\n    this.checkParameters();\n  }\n  //// Updates columnCount property on input change\n  columnInputChange(event) {\n    if (event.target.value < 1) {\n      event.target.value = 1;\n    }\n    this.data.columnCount = Number(event.target.value);\n    this.checkParameters();\n  }\n  //// Checks mineCount doesn't exceed total number of squares, reduces to max value\n  checkParameters() {\n    if (this.data.mineCount > this.data.columnCount * this.data.rowCount) {\n      this.data.mineCount = this.data.columnCount * this.data.rowCount;\n      document.getElementById('mineCount').value = `${this.data.mineCount}`;\n    }\n  }\n  //// Emits current selected options\n  optionsChanged() {\n    const data = {\n      mineCount: this.data.mineCount,\n      columnCount: this.data.columnCount,\n      rowCount: this.data.rowCount\n    };\n    this.optionsChangedEvent.emit(data);\n  }\n}\nOptionsComponent.ɵfac = function OptionsComponent_Factory(t) {\n  return new (t || OptionsComponent)();\n};\nOptionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OptionsComponent,\n  selectors: [[\"app-options\"]],\n  inputs: {\n    data: \"data\"\n  },\n  outputs: {\n    optionsChangedEvent: \"optionsChangedEvent\"\n  },\n  decls: 24,\n  vars: 3,\n  consts: [[\"id\", \"gameOptionsForm\"], [1, \"container\"], [1, \"row\"], [1, \"col-12\", \"col-md\", \"col-xl-12\"], [1, \"input-group\"], [\"for\", \"columnCount\", 1, \"input-group-text\"], [\"id\", \"columnCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"1\", 1, \"form-control\", 3, \"value\", \"change\"], [\"columnAmount\", \"\"], [\"for\", \"rowCount\", 1, \"input-group-text\"], [\"id\", \"rowCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"1\", 1, \"form-control\", 3, \"value\", \"change\"], [\"rowAmount\", \"\"], [1, \"input-group\", \"w-100\"], [\"for\", \"mineCount\", 1, \"input-group-text\"], [\"id\", \"mineCount\", \"type\", \"number\", \"required\", \"\", \"min\", \"1\", 1, \"form-control\", 3, \"value\", \"change\"], [\"mineAmount\", \"\"], [\"id\", \"applyOptions\", 1, \"btn\", \"btn-primary\", \"mt-auto\", 3, \"click\"], [1, \"bi\", \"bi-check2\"]],\n  template: function OptionsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"label\", 5);\n      i0.ɵɵtext(6, \"Columns\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 6, 7);\n      i0.ɵɵlistener(\"change\", function OptionsComponent_Template_input_change_7_listener($event) {\n        return ctx.columnInputChange($event);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"div\", 4)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Rows\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 9, 10);\n      i0.ɵɵlistener(\"change\", function OptionsComponent_Template_input_change_13_listener($event) {\n        return ctx.rowInputChange($event);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"div\", 11)(17, \"label\", 12);\n      i0.ɵɵtext(18, \"Mines\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"input\", 13, 14);\n      i0.ɵɵlistener(\"change\", function OptionsComponent_Template_input_change_19_listener($event) {\n        return ctx.mineInputChange($event);\n      });\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function OptionsComponent_Template_button_click_21_listener() {\n        return ctx.optionsChanged();\n      });\n      i0.ɵɵtext(22, \"Apply\\u00A0\");\n      i0.ɵɵelement(23, \"i\", 16);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.data.columnCount);\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.data.rowCount);\n      i0.ɵɵadvance(6);\n      i0.ɵɵpropertyInterpolate(\"value\", ctx.data.mineCount);\n    }\n  },\n  styles: [\"#gameOptionsForm[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{width:40%;justify-content:center}#gameOptionsForm[_ngcontent-%COMP%]   col[_ngcontent-%COMP%]{max-width:50%;padding:10px}#gameOptionsForm[_ngcontent-%COMP%]   .input-group-text[_ngcontent-%COMP%]{background-color:#0597f2;color:#f5f5f5}#gameOptionsForm[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]{margin:.5vh 0;justify-content:center}#gameOptionsForm[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{text-align:center;background-color:#f5f5f5}.container[_ngcontent-%COMP%]{padding:0}#applyOptionsDiv[_ngcontent-%COMP%]{display:flex;flex-direction:column}#applyOptions[_ngcontent-%COMP%]{display:flex;align-self:flex-end}#gameOptionsForm[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%}#gameOptionsForm[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{justify-content:center;margin:5px 0}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}